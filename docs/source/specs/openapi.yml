openapi: "3.0.0"
info:
  version: 1.0.0
  title: Koku
  license:
    name: AGPL-3.0
paths:
  /api/v1/status/:
    get:
      summary: Obtain server status
      operationId: getStatus
      tags:
        - Status
      responses:
        '200':
          description: An object describing the server status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/customers/:
    post:
      summary: Create a customer
      operationId: createCustomer
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      requestBody:
        description: Customer to add to the service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerIn'
      responses:
        '201':
          description: An object describing the customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOut"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: List the customers
      operationId: listCustomers
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A paginated list of customer objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagination"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/customers/{uuid}/:
    get:
      summary: Get a customer
      operationId: getCustomer
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of customer to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A customer objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOut"

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of customer to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users/:
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      requestBody:
        description: User to add to a Customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '201':
          description: An object describing the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOut"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: List the users
      operationId: listUsers
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A paginated list of user objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPagination"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/{uuid}/:
    get:
      summary: Get a user
      operationId: getUser
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of user to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOut"

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of user to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/{id}/reset-password/:
    put:
      summary: Reset a user's password
      operationId: resetUserPassword
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of user to get
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User password reset information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeIn'
      responses:
        '200':
          description: A User objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOut"

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/current/:
    get:
      summary: Get the current user
      operationId: getCurrentUser
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      responses:
        '200':
          description: An object describing the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOut"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/providers/:
    post:
      summary: Create a provider
      operationId: createProvider
      tags:
        - Provider
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      requestBody:
        description: Provider to add to a Customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderIn'
      responses:
        '201':
          description: An object describing the provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderOut"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: List the providers
      operationId: listProviders
      tags:
        - Provider
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A paginated list of provider objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderPagination"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/providers/{uuid}/:
    get:
      summary: Get a provider
      operationId: getProvider
      tags:
        - Provider
      parameters:
        - in: header
          name: Authorization
          description: "e.g. Token 45138a913da44ab89532bab0352ef84b"
          schema:
            type: string
          required: true
        - name: uuid
          in: path
          description: ID of provider to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A Provider object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderOut"

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Customer:
      required:
        - name
      properties:
        name:
          type: string
          example: "My Tech Company"
    CustomerIn:
      allOf:
        - $ref: "#/components/schemas/Customer"
        - required:
          - owner
      properties:
        owner:
          $ref: "#/components/schemas/UserIn"
    CustomerPagination:
      allOf:
        - $ref: "#/components/schemas/ListPagination"
        - required:
          - results
      properties:
        results:
          type: array
          items:
              $ref: "#/components/schemas/CustomerOut"
    CustomerOut:
      allOf:
        - $ref: "#/components/schemas/Customer"
        - required:
          - uuid
          - owner
          - date_created
      properties:
        uuid:
          type: string
          format: uuid
          example: "600562e7-d7d7-4516-8522-410e72792daf"
        owner:
          $ref: "#/components/schemas/UserOut"
        date_created:
          type: string
          format: date-time
    Error:
      required:
        - error_key
      properties:
        error_key:
          oneOf:
            - type: string
            - type: array
    ListPagination:
      required:
        - previous
        - next
      properties:
        count:
          type: integer
          format: int64
          example: 30
        previous:
          type: string
          format: uri
          example: "/api/v1/(resources)/?page=2"
        next:
          type: string
          format: uri
          example: "/api/v1/(resources)/?page=4"
    PasswordChangeIn:
      required:
        - token
        - password
      properties:
        password:
          type: string
          example: "str0ng!P@ss"
        token:
          type: string
          format: uuid
          example: "40874085-358e-43a8-908f-59c5b11f9179"
    ProviderAuthenticationIn:
      required:
        - provider_resource_name
      properties:
        provider_resource_name:
          type: string
          example: "arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/CostData"
    ProviderBillingSourceIn:
      required:
        - bucket
      properties:
        bucket:
          type: string
          example: "cost_s3"
    Provider:
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "My Company AWS production"
        type:
          type: string
          example: "AWS"
    ProviderIn:
      allOf:
        - $ref: "#/components/schemas/Provider"
        - required:
          - authentication
          - billing_source
      properties:
        authentication:
          $ref: "#/components/schemas/ProviderAuthenticationIn"
        billing_source:
          $ref: "#/components/schemas/ProviderBillingSourceIn"
    ProviderAuthenticationOut:
      allOf:
        - $ref: "#/components/schemas/ProviderAuthenticationIn"
        - required:
          - uuid
      properties:
        uuid:
          type: string
          format: uuid
          example: "57e60f90-8c0c-4bd1-87a0-2143759aae1c"
    ProviderBillingSourceOut:
      allOf:
        - $ref: "#/components/schemas/ProviderBillingSourceIn"
        - required:
          - uuid
      properties:
        uuid:
          type: string
          format: uuid
          example: "57e60f90-8c0c-4bd1-87a0-2143759aae1c"
    ProviderOut:
      allOf:
        - $ref: "#/components/schemas/Provider"
        - required:
          - uuid
          - authentication
          - billing_source
      properties:
        uuid:
          type: string
          format: uuid
          example: "57e60f90-8c0c-4bd1-87a0-2143759aae1c"
        authentication:
          $ref: "#/components/schemas/ProviderAuthenticationOut"
        billing_source:
          $ref: "#/components/schemas/ProviderBillingSourceOut"
    ProviderPagination:
      allOf:
        - $ref: "#/components/schemas/ListPagination"
        - required:
          - results
      properties:
        results:
          type: array
          items:
              $ref: "#/components/schemas/ProviderOut"
    Status:
      required:
        - api_version
        - name
      properties:
        api_version:
          type: integer
          format: int64
          example: 1
        commit:
          type: string
          example: "178d2ea"
        server_address:
          type: string
          example: "127.0.0.1:8000"
        platform_info:
          type: object
          example: {
            "system": "Darwin",
            "node": "node-1.example.com",
            "release": "17.5.0",
            "version": "Darwin Kernel Version 17.5.0",
            "machine": "x86_64",
            "processor": "i386"
            }
        python_version:
          type: string
          example: "3.6.1"
        modules:
          type: object
          example: {
            "coverage": "4.5.1",
            "coverage.version": "4.5.1",
            "coverage.xmlreport": "4.5.1",
            "cryptography": "2.0.3",
            "ctypes": "1.1.0",
            "ctypes.macholib": "1.0",
            "decimal": "1.70",
            "django": "1.11.5",
            "django.utils.six": "1.10.0",
            "django_filters": "1.0.4",
            "http.server": "0.6",
          }
        server_id:
          type: string
          example: "ff4eb8e4-ddfb-4b66-8e0e-045a244990f3"
    User:
      required:
        - username
        - email
      properties:
        username:
          type: string
          example: "smithj"
        email:
          type: string
          format: email
          example: "smithj@mytechco.com"
    UserIn:
      allOf:
        - $ref: "#/components/schemas/User"
        - required:
          - password
      properties:
        password:
          type: string
          example: "str0ng!P@ss"
    UserPagination:
      allOf:
        - $ref: "#/components/schemas/ListPagination"
        - required:
          - results
      properties:
        results:
          type: array
          items:
              $ref: "#/components/schemas/UserOut"
    UserOut:
      allOf:
        - $ref: "#/components/schemas/User"
        - required:
          - uuid
      properties:
        uuid:
          type: string
          format: uuid
          example: "57e60f90-8c0c-4bd1-87a0-2143759aae1c"
