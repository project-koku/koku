swagger: '2.0'
info:
  description: 'The API for Project-Koku.  You can find out more about     Project-Koku at [https://github.com/project-koku/](https://github.com/project-koku/).'
  version: '1.0.0'
  title: 'Koku'
  license:
    name: 'AGPL-3.0'
    url: 'https://opensource.org/licenses/AGPL-3.0'
basePath: '/api/v1'
tags:
- name: 'Status'
  description: 'Operations about status'
- name: 'Token'
  description: 'Operations about authentication token access'
- name: 'Customer'
  description: 'Operations about customer interaction'
- name: 'User'
  description: 'Operations about user interaction'
- name: 'UserPreference'
  description: 'Operations about user preferences'
- name: 'Provider'
  description: 'Operations about provider interaction'
- name: 'Report'
  description: 'Operations about report interaction'
schemes:
- 'http'
paths:
  /status:
    get:
      tags:
        - Status
      summary: Obtain server status
      operationId: getStatus
      produces:
      - 'application/json'
      responses:
        200:
          description: An object describing the server status
          schema:
            $ref: '#/definitions/Status'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /token-auth/:
    post:
      tags:
        - Token
      summary: Obtain an authentication token
      operationId: getAuthToken
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: Username and password to exchange for token
        required: true
        schema:
          $ref: '#/definitions/TokenIn'
      responses:
        200:
          description: An token object
          schema:
            $ref: '#/definitions/TokenOut'
        400:
          description: Invalid Token
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /customers:
    post:
      tags:
        - Customer
      summary: Create a customer
      operationId: createCustomer
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: Customer to add to the service
        required: true
        schema:
          $ref: '#/definitions/CustomerIn'
      responses:
        201:
          description: An object describing the customer
          schema:
            $ref: '#/definitions/CustomerOut'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    get:
      tags:
        - Customer
      summary: List the customers
      operationId: listCustomers
      produces:
      - 'application/json'
      responses:
        200:
          description: A paginated list of customer objects
          schema:
            $ref: '#/definitions/CustomerPagination'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /customers/{uuid}:
    get:
      tags:
        - Customer
      summary: Get a customer
      operationId: getCustomer
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of customer to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        200:
          description: A customer objects
          schema:
            $ref: '#/definitions/CustomerOut'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      tags:
        - Customer
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of customer to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        204:
          description: Customer deleted
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []


  /users:
    post:
      tags:
        - User
      summary: Create a user
      operationId: createUser
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: User to add to a Customer
        required: true
        schema:
          $ref: '#/definitions/UserIn'
      responses:
        201:
          description: An object describing the user
          schema:
            $ref: '#/definitions/UserOut'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    get:
      tags:
        - User
      summary: List the users
      operationId: listUsers
      produces:
      - 'application/json'
      responses:
        200:
          description: A paginated list of user objects
          schema:
            $ref: '#/definitions/UserPagination'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /users/{uuid}:
    get:
      tags:
        - User
      summary: Get a user
      operationId: getUser
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        200:
          description: A User object
          schema:
            $ref: '#/definitions/UserOut'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        204:
          description: User deleted
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /users/{uuid}/preferences:
    post:
      tags:
        - UserPreference
      summary: Create a user preference
      operationId: createUserPreference
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      - in: 'body'
        name: 'body'
        description: Preference to add to a Preference
        required: true
        schema:
          $ref: '#/definitions/UserPreferenceIn'
      responses:
        201:
          description: An object describing the user
          schema:
            $ref: '#/definitions/UserPreferenceOut'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    get:
      tags:
        - UserPreference
      summary: List the user's preferences
      operationId: listUserPreferences
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        200:
          description: A paginated list of preference objects
          schema:
            $ref: '#/definitions/UserPreferencePagination'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /users/{user_uuid}/preferences/{pref_uuid}:
    get:
      tags:
        - UserPreference
      summary: Get a user preference
      operationId: getUserPreference
      produces:
      - 'application/json'
      parameters:
      - name: 'user_uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      - name: 'pref_uuid'
        in: 'path'
        description: 'ID of preference to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        200:
          description: A UserPreference object
          schema:
            $ref: '#/definitions/UserPreferenceOut'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    delete:
      tags:
        - UserPreference
      summary: Delete a user preference
      operationId: deleteUserPreference
      produces:
      - 'application/json'
      parameters:
      - name: 'user_uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      - name: 'pref_uuid'
        in: 'path'
        description: 'ID of preference to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        204:
          description: User deleted
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    put:
      tags:
        - UserPreference
      summary: Update a user preference
      operationId: updateUserPreference
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'user_uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      - name: 'pref_uuid'
        in: 'path'
        description: 'ID of preference to get'
        required: true
        type: 'string'
        format: 'uuid'
      - in: 'body'
        name: 'body'
        description: Update to a Preference
        required: true
        schema:
          $ref: '#/definitions/UserPreferenceIn'
      responses:
        200:
          description: Preference updated
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /users/{uuid}/reset-password:
    put:
      tags:
        - User
      summary: Reset a user's password
      operationId: resetUserPassword
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of user to get'
        required: true
        type: 'string'
        format: 'uuid'
      - in: 'body'
        name: 'body'
        description: User password reset information
        required: true
        schema:
          $ref: '#/definitions/PasswordChangeIn'
      responses:
        200:
          description: A User objects
          schema:
            $ref: '#/definitions/UserOut'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /users/current/:
    get:
      tags:
        - User
      summary: Get the current user
      operationId: getCurrentUser
      produces:
      - 'application/json'
      responses:
        200:
          description: An object describing the user
          schema:
            $ref: '#/definitions/UserOut'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /providers/:
    post:
      tags:
        - Provider
      summary: Create a provider
      operationId: createProvider
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: Provider to add to a Customer
        required: true
        schema:
          $ref: '#/definitions/ProviderIn'
      responses:
        201:
          description: An object describing the provider
          schema:
            $ref: '#/definitions/ProviderOut'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []            
    get:
      tags:
        - Provider
      summary: List the providers
      operationId: listProviders
      produces:
      - 'application/json'
      responses:
        200:
          description: A paginated list of provider objects
          schema:
            $ref: '#/definitions/ProviderPagination'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
    delete:
      tags:
        - Provider
      summary: Delete a provider
      operationId: deleteProvider
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of provider to delete'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        204:
          description: Provider deleted
        401:
          description: Unauthorized
        403:
          description: Insufficent permissions to delete provider
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /providers/{uuid}:
    get:
      tags:
        - Provider
      summary: Get a provider
      operationId: getProvider
      produces:
      - 'application/json'
      parameters:
      - name: 'uuid'
        in: 'path'
        description: 'ID of provider to get'
        required: true
        type: 'string'
        format: 'uuid'
      responses:
        200:
          description: A Provider object
          schema:
            $ref: '#/definitions/ProviderOut'
        401:
          description: Unauthorized
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /reports/costs:
    get:
      tags:
        - Report
      summary: Query to obtain cost reports
      operationId: getCostReports
      produces:
      - 'application/json'
      parameters:
      - name: 'filter'
        in: 'query'
        description: 'The filter to apply to the report as a URL encoded dictionary.'
        type: 'string'
      - name: 'group_by'
        in: 'query'
        description: 'The grouping to apply to the report as a URL encoded dictionary.'
        type: 'string'
      - name: 'order_by'
        in: 'query'
        description: 'The ordering to apply to the report as a URL encoded dictionary.'
        type: 'string'
      responses:
        200:
          description: A report object
          schema:
            $ref: '#/definitions/ReportCost'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
  /reports/inventory:
    get:
      tags:
        - Report
      summary: Query to obtain inventory reports
      operationId: getInventoryReports
      produces:
      - 'application/json'
      parameters:
      - name: 'filter'
        in: 'query'
        description: 'The filter to apply to the report as a URL encoded dictionary.'
        type: 'string'
      - name: 'group_by'
        in: 'query'
        description: 'The grouping to apply to the report as a URL encoded dictionary.'
        type: 'string'
      - name: 'order_by'
        in: 'query'
        description: 'The ordering to apply to the report as a URL encoded dictionary.'
        type: 'string'
      responses:
        200:
          description: A report object
          schema:
            $ref: '#/definitions/ReportInventory'
        401:
          description: Unauthorized
        500:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
definitions:
  Customer:
    required:
      - name
    properties:
      name:
        type: string
        example: My Tech Company
  CustomerIn:
    allOf:
      - $ref: '#/definitions/Customer'
      - required:
          - owner
    properties:
      owner:
        $ref: '#/definitions/UserIn'
  CustomerPagination:
    allOf:
      - $ref: '#/definitions/ListPagination'
      - required:
          - results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/CustomerOut'
  CustomerOut:
    allOf:
      - $ref: '#/definitions/Customer'
      - required:
          - uuid
          - owner
          - date_created
    properties:
      uuid:
        type: string
        format: uuid
        example: 600562e7-d7d7-4516-8522-410e72792daf
      owner:
        $ref: '#/definitions/UserOut'
      date_created:
        type: string
        format: date-time
  Error:
    required:
      - error_key
    properties:
      error_key:
        type: string
  ListPagination:
    required:
      - previous
      - next
    properties:
      count:
        type: integer
        format: int64
        example: 30
      previous:
        type: string
        format: uri
        example: /api/v1/(resources)/?page=2
      next:
        type: string
        format: uri
        example: /api/v1/(resources)/?page=4
  PasswordChangeIn:
    required:
      - token
      - password
    properties:
      password:
        type: string
        example: str0ng!P@ss
      token:
        type: string
        format: uuid
        example: 40874085-358e-43a8-908f-59c5b11f9179
  ProviderAuthenticationIn:
    required:
      - provider_resource_name
    properties:
      provider_resource_name:
        type: string
        example: 'arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/CostData'
  ProviderBillingSourceIn:
    required:
      - bucket
    properties:
      bucket:
        type: string
        example: cost_s3
  Provider:
    required:
      - name
      - type
    properties:
      name:
        type: string
        example: My Company AWS production
      type:
        type: string
        example: AWS
  ProviderIn:
    allOf:
      - $ref: '#/definitions/Provider'
      - required:
          - authentication
          - billing_source
    properties:
      authentication:
        $ref: '#/definitions/ProviderAuthenticationIn'
      billing_source:
        $ref: '#/definitions/ProviderBillingSourceIn'
  ProviderAuthenticationOut:
    allOf:
      - $ref: '#/definitions/ProviderAuthenticationIn'
      - required:
          - uuid
    properties:
      uuid:
        type: string
        format: uuid
        example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
  ProviderBillingSourceOut:
    allOf:
      - $ref: '#/definitions/ProviderBillingSourceIn'
      - required:
          - uuid
    properties:
      uuid:
        type: string
        format: uuid
        example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
  ProviderOut:
    allOf:
      - $ref: '#/definitions/Provider'
      - required:
          - uuid
          - authentication
          - billing_source
          - customer
          - created_by
    properties:
      uuid:
        type: string
        format: uuid
        example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
      authentication:
        $ref: '#/definitions/ProviderAuthenticationOut'
      billing_source:
        $ref: '#/definitions/ProviderBillingSourceOut'
      customer:
        $ref: '#/definitions/CustomerOut'
      created_by:
        $ref: '#/definitions/UserOut'
  ProviderPagination:
    allOf:
      - $ref: '#/definitions/ListPagination'
      - required:
          - results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/ProviderOut'
  ReportFilter:
    type: object
    properties:
      resolution:
        $ref: '#/definitions/ReportResolution'
      time_scope:
        $ref: '#/definitions/ReportTimeScope'
      resource_scope:
        type: array
        items:
          $ref: '#/definitions/ReportResourceScope'
        example: []
  ReportGrouping:
    type: object
    properties:
      account:
        type: array
        items:
          type: string
      service:
        type: array
        items:
          type: string
      instance_type:
        type: array
        items:
          type: string
      storage_type:
        type: array
        items:
          type: string
    example: {'account': ['*']}
    description: The grouping to apply to the report. No grouping by default.
  ReportOrdering:
    type: object
    properties:
      cost:
        type: string
        enum:
          - asc
          - desc
      inventory:
        type: string
        enum:
          - asc
          - desc
    example: { 'cost': 'asc' }
    description: The ordering to apply to the report. Default is ascending order for the data.
  ReportResolution:
    type: string
    enum:
      - daily
      - monthly
    description: The resolution to apply to the report. Default resolution is daily.
  ReportTimeScope:
    type: integer
    enum:
      - -1
      - -2
      - -10
      - -30
    example: -10
    description: The time scope to apply to the report. Default time scope is '-10', meaning the last 10 days. Last 30 days would be '-30'. '-10' and '-30' are only valid when used with 'daily' resolution.'-1' is used for current month, '-2' is used for last month when resolution is 'monthly' otherwise invalid.
  ReportResourceScope:
    type: string
    enum:
      - EC2
      - EBS
      - EFS
      - S3
    description: The resources scope to apply to the report. Default resource scope is null, meaning no product or service filtering.
  Report:
    required:
      - group_by
      - order_by
      - filter
    properties:
      group_by:
        $ref: '#/definitions/ReportGrouping'
      order_by:
        $ref: '#/definitions/ReportOrdering'
      filter:
        $ref: '#/definitions/ReportFilter'
  ReportCost:
    allOf:
      - $ref: '#/definitions/Report'
      - required:
          - data
    properties:
      data:
        type: array
        items:
          type: object
          example: [{'2018-05-28': [{'accountA': 52.80, 'accountB': 29.47, 'accountC': 1.39}]}]
  ReportInventory:
    allOf:
      - $ref: '#/definitions/Report'
      - required:
          - data
    properties:
      data:
        type: array
        items:
          type: object
          example: [{'2018-05-28': [{'t2.medium': 5, 'm5.2xlarge': 290}]}]
  Status:
    required:
      - api_version
      - name
    properties:
      api_version:
        type: integer
        format: int64
        example: 1
      commit:
        type: string
        example: 178d2ea
      server_address:
        type: string
        example: '127.0.0.1:8000'
      platform_info:
        type: object
        example:
          system: Darwin
          node: node-1.example.com
          release: 17.5.0
          version: Darwin Kernel Version 17.5.0
          machine: x86_64
          processor: i386
      python_version:
        type: string
        example: 3.6.1
      modules:
        type: object
        example:
          coverage: 4.5.1
          coverage.version: 4.5.1
          coverage.xmlreport: 4.5.1
          cryptography: 2.0.3
          ctypes: 1.1.0
          ctypes.macholib: '1.0'
          decimal: '1.70'
          django: 1.11.5
          django.utils.six: 1.10.0
          django_filters: 1.0.4
          http.server: '0.6'
      server_id:
        type: string
        example: ff4eb8e4-ddfb-4b66-8e0e-045a244990f3
  TokenIn:
    required:
      - username
      - password
    properties:
      username:
        type: string
        example: smithj
      password:
        type: string
        example: str0ng!P@ss
  TokenOut:
    required:
      - token
    properties:
      token:
        type: string
        example: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
  User:
    required:
      - username
      - email
    properties:
      username:
        type: string
        example: smithj
      email:
        type: string
        format: email
        example: smithj@mytechco.com
  UserPreference:
    required:
      - name
      - preference
    properties:
      name:
        type: string
        example: my-preference-name
      preference:
        type: object
        format: json
        example: '{''timezone'': ''UTC''}'
      description:
        type: string
        example: my long preference description
  UserIn:
    allOf:
      - $ref: '#/definitions/User'
      - required:
          - password
    properties:
      password:
        type: string
        example: str0ng!P@ss
  UserPagination:
    allOf:
      - $ref: '#/definitions/ListPagination'
      - required:
          - results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/UserOut'
  UserOut:
    allOf:
      - $ref: '#/definitions/User'
      - required:
          - uuid
    properties:
      uuid:
        type: string
        format: uuid
        example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
  UserPreferenceIn:
    allOf:
      - $ref: '#/definitions/UserPreference'
      - required:
          - name
          - preference
    properties:
      name:
        type: string
        example: my-preference-name
      preference:
        type: object
        format: json
        example: '{"currency": "USD"}'
      description:
        type: string
        example: my long preference description
  UserPreferencePagination:
    allOf:
      - $ref: '#/definitions/ListPagination'
      - required:
          - results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/UserPreferenceOut'
  UserPreferenceOut:
    allOf:
      - $ref: '#/definitions/UserPreference'
      - required:
          - uuid
          - user
    properties:
      uuid:
        type: string
        format: uuid
        example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
      user:
        $ref: '#/definitions/UserOut'
externalDocs:
  description: 'Find out more about Project-Koku'
  url: 'https://github.com/project-koku/'