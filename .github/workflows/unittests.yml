name: Check Migrations and Run Unit Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:

  setup:
    runs-on: ubuntu-20.04
    outputs:
      run-tests: ${{ steps.check-files-or-fork.outputs.run-tests }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v13
        with:
          files: |
            db_functions/
            koku/
            .github/postgres
            .github/scripts/check_migrations.sh
            .github/workflows/unittests.yml
            Pipfile.lock

      - id: check-files-or-fork
        run: |
          if [ ! -z "${{ steps.changed-files.outputs.all_changed_and_modified_files }}" ] || [ "${{ github.event.pull_request.head.repo.full_name }}" != "project-koku/koku" ]; then
            echo "::set-output name=run-tests::true"
          fi

      - run: echo ${{ needs.setup.outputs.run-tests }}
      - run: echo ${{ github.event.pull_request.head.repo.full_name }}


  unit-tests:
    needs: setup
    if: ${{ needs.setup.outputs.run-tests == 'true' }}
    runs-on: ubuntu-20.04
    # continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]
        # experimental: [false]
        # include:
        #   - python-version: 3.10
        #     experimental: true
    env:
      COMPOSE_FILE: .github/postgres/docker-compose.yaml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Display build environment
        run: printenv

      - name: Start the postgres DB
        run: docker-compose up -d db

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pipenv
        run: sudo python3 -m pip install pipenv

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pipenv
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-env-${{ matrix.python-version }}-${{ hashFiles('**/Pipfile.lock') }}-${{ secrets.ACTIONS_CACHE_KEY_UUID }}

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --ignore-pipfile --python ${{ matrix.python-version }}

      - name: Check migrations
        run: bash .github/scripts/check_migrations.sh
        env:
          DATABASE_SERVICE_NAME: POSTGRES_SQL
          DATABASE_ENGINE: postgresql
          DATABASE_NAME: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          POSTGRES_SQL_SERVICE_HOST: localhost
          POSTGRES_SQL_SERVICE_PORT: ${{ job.services.postgres.ports[5432] }}
          PROMETHEUS_MULTIPROC_DIR: /tmp

      - name: Run unit tests
        run: pipenv run coverage run ./koku/manage.py test --noinput --verbosity 2 ./koku/
        env:
          DATABASE_SERVICE_NAME: POSTGRES_SQL
          DATABASE_ENGINE: postgresql
          DATABASE_NAME: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          POSTGRES_SQL_SERVICE_HOST: localhost
          POSTGRES_SQL_SERVICE_PORT: ${{ job.services.postgres.ports[5432] }}
          HIVE_DATABASE_PASSWORD: hivedbpw
          ACCOUNT_ENHANCED_METRICS: True
          ENABLE_TRINO_SOURCE_TYPE: GCP
          PROMETHEUS_MULTIPROC_DIR: /tmp
          TRINO_DATE_STEP: 31
          MIDDLEWARE_TIME_TO_LIVE: 0
          ENHANCED_ORG_ADMIN: True
          ENABLE_PARQUET_PROCESSING: True

      - name: Convert coverage report to XML
        run: pipenv run coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          name: Python-${{ matrix.python-version}}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  unit-tests-result:
    needs: unit-tests
    if: |
      always() &&
      (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
      - name: Display build environment
        run: printenv

      - run: echo "Unit tests and migration check were '${{ needs.unit-tests.result }}'"

      - name: Override Codecov for skipped tests
        # This is a hack to override the Codecov behavior for skipped tests.
        if: always() && needs.unit-tests.result == 'skipped' && github.ref_name != 'main'
        env:
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          gh api "/repos/project-koku/koku/statuses/${{ github.event.pull_request.head.sha }}" -f description="codecov skipped because unit tests were not required" -f context="codecov/patch" -f state="success"
          gh api "/repos/project-koku/koku/statuses/${{ github.event.pull_request.head.sha }}" -f description="codecov skipped because unit tests were not required" -f context="codecov/project" -f state="success"
