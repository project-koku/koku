name: Unit Tests

on:
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-18.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7]

    services:
      postgres:
        # Docker Hub image
        image: postgres:9.6
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout repsository
        uses: actions/checkout@v2

      - name: Display build environment
        run: printenv

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Pipenv
        run: python -m pip install --upgrade pip pipenv

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v1
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-${{ matrix.python-version }}-${{ hashFiles('**/Pipfile.lock') }}
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true' || steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip pipenv
          sed -ri 's/python_version = ".+"/python_version = "${{ matrix.python }}"/g' Pipfile
          pipenv install --dev --ignore-pipfile

      - name: Run unit tests
        run: pipenv run coverage run ./koku/manage.py test --noinput --verbosity 2 ./koku/
        env:
          DATABASE_SERVICE_NAME: POSTGRES_SQL
          DATABASE_ENGINE: postgresql
          DATABASE_NAME: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          POSTGRES_SQL_SERVICE_HOST: localhost
          POSTGRES_SQL_SERVICE_PORT: ${{ job.services.postgres.ports[5432] }}
          prometheus_multiproc_dir: /tmp

      - name: Convert coverage report to XML
        run: pipenv run coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: Python-${{ matrix.python-version}}
          fail_ci_if_error: true
