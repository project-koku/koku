kind: Template
apiVersion: v1
metadata:
  name: koku-secrets-template
  annotations:
    openshift.io/display-name: "Koku"
    description: "Cloud Cost Management powered by Django+PostgreSQL"
    tags: "quickstart,python,django,postgresql"
    iconClass: "icon-python"
    openshift.io/long-description: "This template defines secret values required to run the Koku application."
    openshift.io/provider-display-name: "Red Hat, Inc."
    openshift.io/documentation-url: "https://koku.readthedocs.io/en/latest/"
labels:
  app: koku
  template: koku-secret
objects:
- apiVersion: v1
  stringData:
    data-source-name: postgresql://${DB_MONITOR_USER}:${DB_MONITOR_USER_PW}@${DATABASE_HOST}:5432/dbname?sslmode=disable
  kind: Secret
  metadata:
    labels:
      app: postgresql-exporter
      template: postgresql-exporter-template
    name: postgresql-exporter
    namespace: secrets
  type: Opaque
- apiVersion: v1
  stringData:
    aws-access-key-id: ${AWS_ACCESS_KEY_ID}
    aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-aws_access_key_id: '{.data[''aws-access-key-id'']}'
      template.openshift.io/expose-aws_secret_access_key: '{.data[''aws-secret-access-key'']}'
    labels:
      app: rdsexporter
      template: rdsexporter-template
    name: rdsexporter
    namespace: secrets
  type: Opaque
- apiVersion: v1
  stringData:
    aws-access-key-id: ${AWS_ACCESS_KEY_ID}
    aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
    cloudwatch-aws-access-key-id: ${CLOUDWATCH_AWS_ACCESS_KEY_ID}
    cloudwatch-aws-secret-access-key: ${CLOUDWATCH_AWS_SECRET_ACCESS_KEY}
    cloudwatch-aws-region: 'us-east-1'
    cloudwatch-log-group: ${CLOUDWATCH_LOG_GROUP}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-access_key: '{.data[''cloudwatch-aws-access-key-id'']}'
      template.openshift.io/expose-aws_access_key_id: '{.data[''aws-access-key-id'']}'
      template.openshift.io/expose-aws_secret_access_key: '{.data[''aws-secret-access-key'']}'
      template.openshift.io/expose-log_group: '{.data[''cloudwatch-log-group'']}'
      template.openshift.io/expose-region: '{.data[''cloudwatch-aws-region'']}'
      template.openshift.io/expose-secret: '{.data[''cloudwatch-aws-secret-access-key'']}'
    labels:
      app: koku
      template: koku-secret
    name: koku-aws
    namespace: secrets
  type: Opaque
- apiVersion: v1
  data:
    gcp-credentials: ${GCP_CREDENTIALS}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-gcp_credentials: '{.data[''gcp-credentials'']}'
    labels:
      app: koku
      template: koku-secret
    name: koku-gcp
    namespace: secrets
  type: Opaque
- apiVersion: v1
  stringData:
    db.name: ${DATABASE_NAME}
    db.password: ${DATABASE_PASSWORD}
    db.user: ${DATABASE_USER}
    db.host: ${DATABASE_HOST}
    db.monitor.user: ${DB_MONITOR_USER}
    db.monitor.user.password: ${DB_MONITOR_USER_PW}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
      template.openshift.io/expose-username: '{.data[''database-host'']}'
    labels:
      app: koku
      template: koku-secret
    name: koku-db
    namespace: secrets
  type: Opaque
- apiVersion: v1
  stringData:
    flower-auth-scheme: ${FLOWER_AUTH_SCHEME}
    flower-basic-auth-params: ${FLOWER_BASIC_AUTH_PARAMS}
    flower-oauth2-key: ${FLOWER_OAUTH2_KEY}
    flower-oauth2-secret: ${FLOWER_OAUTH2_SECRET}
    flower-oauth2-redirect-uri: ${FLOWER_OAUTH2_REDIRECT_URI}
    flower-oauth2-domains: ${FLOWER_OAUTH2_DOMAINS}
  kind: Secret
  metadata:
    annotations:
    labels:
      app: koku
      template: koku-secret
    name: koku-flower
    namespace: secrets
  type: Opaque
- apiVersion: v1
  stringData:
    django-secret-key: ${DJANGO_SECRET_KEY}
    database-client-cert: ${DATABASE_CLIENT_CERT}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-django_secret_key: '{.data[''django-secret-key'']}'
      template.openshift.io/expose-database-client-cert: '{.data[''database-client-cert'']}'
    labels:
      app: koku
      template: koku-secret
    name: koku-secret
    namespace: secrets
  type: Opaque
- apiVersion: v1
  kind: Secret
  metadata:
    name: koku-sentry
  stringData:
    api-sentry-dsn: ${KOKU_API_SENTRY_DSN}
    celery-sentry-dsn: ${KOKU_CELERY_SENTRY_DSN}
  labels:
    app: koku
    template: koku-secret
  name: koku-sentry
  namespace: secrets

parameters:
# database params
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: koku
- displayName: Database host
  name: DATABASE_HOST
  required: true
  value: koku-db.hccm.svc.cluster.local
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: koku
- displayName: Database Username
  from: 'user_[a-zA-Z0-9]{12}'
  generate: expression
  name: DATABASE_USER
  required: true
- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
  required: true
- displayName: Database Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
  required: true
- displayName: Database Client Certificate
  name: DATABASE_CLIENT_CERT
  required: false
  value: ''
- displayName: Database Monitoring User
  name: DB_MONITOR_USER
  required: true
  value: kokumon
- displayName: Database Monitoring User Password
  name: DB_MONITOR_USER_PW
  required: true
  value: _kokumon_

# application secret keys
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[a-zA-Z0-9]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
  required: true

# Primary AWS account creds
- displayName: AWS Access Key ID
  from: ${AWS_ACCESS_KEY_ID}
  name: AWS_ACCESS_KEY_ID
  required: true
  value: 'AAAAAAAAAAAAAAAAAAAA'
- displayName: AWS Secret Access Key
  from: ${AWS_SECRET_ACCESS_KEY}
  name: AWS_SECRET_ACCESS_KEY
  required: true
  value: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

# cloudwatch account creds
- displayName: Cloud Watch Amazon Web Services Access ID
  required: false
  name: CLOUDWATCH_AWS_ACCESS_KEY_ID
- displayName: Cloud Watch Amazon Web Services Secret Access Key
  required: false
  name: CLOUDWATCH_AWS_SECRET_ACCESS_KEY
- displayName: Cloud Watch Amazon Web Services Logging Group
  required: false
  name: CLOUDWATCH_LOG_GROUP

- displayName: GCP Credentials
  from: ${GCP_CREDENTIALS}
  name: GCP_CREDENTIALS
  required: true
  value: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

# (optional) flower params
- description: One of 'basic', 'google', or 'github'
  displayName: Flower auth scheme
  name: FLOWER_AUTH_SCHEME
  required: false
- description: Flower basic auth parameters
  displayName: Flower basic auth parameters
  name: FLOWER_BASIC_AUTH_PARAMS
  required: false
- description: Flower OAuth2 key
  displayName: Flower OAuth2 key
  name: FLOWER_OAUTH2_KEY
  required: false
- description: Flower OAuth2 secret
  displayName: Flower OAuth2 secret
  name: FLOWER_OAUTH2_SECRET
  required: false
- description: Flower OAuth2 redirect URI
  displayName: Flower OAuth2 redirect URI
  name: FLOWER_OAUTH2_REDIRECT_URI
  required: false
  value: 'http://flower.example.com/login'
- description: Flower OAuth2 whitelisted domains
  displayName: Flower OAuth2 whitelisted domains
  name: FLOWER_OAUTH2_DOMAINS
  required: false
  value: '.*@example\.com'

  # optional sentry params
- description: Koku API Sentry DSN
  displayName: Koku API Sentry DSN
  name: KOKU_API_SENTRY_DSN
  required: false
- description: Koku Celery Sentry DSN
  displayName: Koku Celery Sentry DSN
  name: KOKU_CELERY_SENTRY_DSN
  required: false
