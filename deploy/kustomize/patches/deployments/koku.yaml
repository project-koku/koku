- op: replace  # only koku is replace, all other services are appended to this one
  path: /objects/0/spec/deployments/0
  value:
    name: clowder-api
    minReplicas: ${{KOKU_MIN_REPLICAS}}
    webServices:
      public:
        enabled: true
      private:
        enabled: false
      metrics:
        enabled: true
    podSpec:
      image: ${IMAGE}:${IMAGE_TAG}
      initContainers:
        - command:  # this `command` overrides haberdasher; when implementing haberdasher, change this to `args`
            - /bin/bash
            - -c
            - $HOME/scripts/run_migrations.sh
          image: ${IMAGE}:${IMAGE_TAG}
          inheritEnv: true
      command:  # this `command` overrides haberdasher; `command` can be removed entirely when implementing haberdasher
        - /usr/libexec/s2i/run
      env:
        - name: CLOWDER_ENABLED
          value: ${CLOWDER_ENABLED}
        - name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: django-secret-key
              name: koku-secret
              optional: false
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: aws-access-key-id
              name: koku-aws
              optional: false
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: aws-secret-access-key
              name: koku-aws
              optional: false
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: ${GOOGLE_APPLICATION_CREDENTIALS}
        - name: APP_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: API_PATH_PREFIX
          value: ${API_PATH_PREFIX}
        - name: APP_DOMAIN
          value: ${APP_DOMAIN}
        - name: DEVELOPMENT
          value: ${DEVELOPMENT}
        - name: GUNICORN_LOG_LEVEL
          value: ${GUNICORN_LOG_LEVEL}
        - name: KOKU_LOG_LEVEL
          value: ${KOKU_KOKU_LOG_LEVEL}
        - name: DJANGO_LOG_LEVEL
          value: ${DJANGO_LOG_LEVEL}
        - name: DJANGO_LOG_FORMATTER
          value: ${DJANGO_LOG_FORMATTER}
        - name: DJANGO_LOG_HANDLERS
          value: ${DJANGO_LOG_HANDLERS}
        - name: DJANGO_LOG_DIRECTORY
          value: ${DJANGO_LOG_DIRECTORY}
        - name: DJANGO_LOGGING_FILE
          value: ${DJANGO_LOG_FILE}
        - name: RBAC_SERVICE_PATH
          value: ${RBAC_SERVICE_PATH}
        - name: RBAC_CACHE_TTL
          value: ${RBAC_CACHE_TTL}
        - name: prometheus_multiproc_dir
          value: ${PROMETHEUS_DIR}
        - name: REQUESTED_BUCKET
          value: ${S3_BUCKET_NAME}
        - name: ENABLE_S3_ARCHIVING
          value: ${ENABLE_S3_ARCHIVING}
        - name: ENABLE_PARQUET_PROCESSING
          value: ${ENABLE_PARQUET_PROCESSING}
        - name: ENABLE_TRINO_SOURCES
          value: ${ENABLE_TRINO_SOURCES}
        - name: ENABLE_TRINO_ACCOUNTS
          value: ${ENABLE_TRINO_ACCOUNTS}
        - name: ENABLE_TRINO_SOURCE_TYPE
          value: ${ENABLE_TRINO_SOURCE_TYPE}
        - name: KOKU_API_ENABLE_SENTRY
          value: ${ENABLE_API_SENTRY}
        - name: KOKU_SENTRY_ENVIRONMENT
          value: ${KOKU_SENTRY_ENV}
        - name: KOKU_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              key: api-sentry-dsn
              name: koku-sentry
              optional: true
        - name: DEMO_ACCOUNTS
          value: ${DEMO_ACCOUNTS}
        - name: POD_CPU_LIMIT # required to spin up appropriate number of gunicorn workers
          valueFrom:
            resourceFieldRef:
              containerName: koku-clowder-api
              resource: limits.cpu
        - name: GUNICORN_THREADS
          value: ${GUNICORN_THREADS}
        - name: ACCOUNT_ENHANCED_METRICS
          value: ${ACCOUNT_ENHANCED_METRICS}
        - name: CACHED_VIEWS_DISABLED
          value: ${CACHED_VIEWS_DISABLED}
        - name: RETAIN_NUM_MONTHS
          value: ${RETAIN_NUM_MONTHS}
      livenessProbe:
        httpGet:
          path: ${API_PATH_PREFIX}/v1/status/
          port: web
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        failureThreshold: 5
        timeoutSeconds: 10
      readinessProbe:
        httpGet:
          path: ${API_PATH_PREFIX}/v1/status/
          port: web
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        failureThreshold: 5
        timeoutSeconds: 10
      resources:
        limits:
          cpu: ${KOKU_CPU_LIMIT}
          memory: ${KOKU_MEMORY_LIMIT}
        requests:
          cpu: ${KOKU_CPU_REQUEST}
          memory: ${KOKU_MEMORY_REQUEST}
      volumeMounts:
      - name: gcp-credentials
        mountPath: /etc/gcp
        readOnly: true
      - name: prometheus-data
        mountPath: ${PROMETHEUS_DIR}
      volumes:
      - name: prometheus-data
        emptyDir: {}
      - name: gcp-credentials
        secret:
          secretName: koku-gcp
          items:
            - key: gcp-credentials
              path: gcp-credentials.json

- op: add
  path: /parameters/-
  value:
    displayName: Minimum replicas
    name: KOKU_MIN_REPLICAS
    required: true
    value: '3'
- op: add
  path: /parameters/-
  value:
    displayName: Memory Request
    name: KOKU_MEMORY_REQUEST
    required: true
    value: 128Mi
- op: add
  path: /parameters/-
  value:
    displayName: Memory Limit
    name: KOKU_MEMORY_LIMIT
    required: true
    value: 768Mi
- op: add
  path: /parameters/-
  value:
    displayName: CPU Request
    name: KOKU_CPU_REQUEST
    required: true
    value: 100m
- op: add
  path: /parameters/-
  value:
    displayName: CPU Limit
    name: KOKU_CPU_LIMIT
    required: true
    value: 300m
- op: add
  path: /parameters/-
  value:
    displayName: Log Level for koku-api
    name: KOKU_KOKU_LOG_LEVEL
    required: true
    value: INFO
