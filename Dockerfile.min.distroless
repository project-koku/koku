FROM registry.access.redhat.com/ubi8/ubi-minimal:latest AS build-env

ENV PYTHON_VERSION=3.9 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    PIP_NO_CACHE_DIR=off \
    PIPENV_VERBOSITY=-1 \
    APP_ROOT=/koku \
    APP_HOME=/koku/koku \
    HOME=/koku \
    PLATFORM="el8"

# RHEL7 base images automatically set these envvars to run scl_enable. RHEl8
# images, however, don't as most images don't need SCLs any more. But we want
# to run it even on RHEL8, because we set the virtualenv environment as part of
# that script
# ENV BASH_ENV=${APP_ROOT}/etc/scl_enable \
#     ENV=${APP_ROOT}/etc/scl_enable \
#     PROMPT_COMMAND=". ${APP_ROOT}/etc/scl_enable"

ENV SUMMARY="Koku is the Cost Management application" \
    DESCRIPTION="Koku is the Cost Management application"

LABEL summary="$SUMMARY" \
    description="$DESCRIPTION" \
    io.k8s.description="$DESCRIPTION" \
    io.k8s.display-name="Koku" \
    io.openshift.expose-services="8000:http" \
    io.openshift.tags="builder,python,python38,rh-python38" \
    com.redhat.component="python38-docker" \
    name="Koku" \
    version="1" \
    maintainer="Red Hat Cost Management Services <cost-mgmt@redhat.com>"

# Very minimal set of packages
# glibc-langpack-en is needed to set locale to en_US and disable warning about it
# gcc to compile some python packages (e.g. ciso8601)
# shadow-utils to make useradd available
RUN INSTALL_PKGS="python39 python39-devel glibc-langpack-en gcc shadow-utils" && \
    microdnf --nodocs -y upgrade && \
    microdnf -y --setopt=tsflags=nodocs --setopt=install_weak_deps=0 install $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    microdnf -y clean all --enablerepo='*'

WORKDIR ${HOME}

ARG PIPENV_DEV=False

# - Create a Python virtual environment for use by any application to avoid
#   potential conflicts with Python packages preinstalled in the main Python
#   installation.
# - In order to drop the root user, we have to make some directories world
#   writable as OpenShift default security model is to run the container
#   under random UID.

RUN python3.9 -m venv /venv
ENV PATH=/venv/bin:$PATH
RUN \
    pip install --upgrade pip && \
    pip install pipenv



COPY Pipfile Pipfile
COPY Pipfile.lock Pipfile.lock
RUN PIPENV_VENV_IN_PROJECT=1 pipenv install --deploy

COPY . .

ENV PATH=/koku/.venv/bin:$PATH
ENV PYTHONPATH=/koku/.venv/bin \
    PROMETHEUS_MULTIPROC_DIR=/tmp

RUN python koku/manage.py collectstatic --noinput

FROM gcr.io/distroless/python3
COPY --from=build-env /koku /koku
COPY --from=build-env /koku/.venv/lib/python3.9/site-packages/ /usr/lib/python3.9/site-packages/.
WORKDIR /koku/koku
ENV \
    PYTHONUNBUFFERED=1 \
    PATH=/koku/.venv/bin:$PATH \
    PYTHONPATH=/koku/.venv/lib/python3.9/site-packages/:/koku/.venv/lib64/python3.9/site-packages/:${PYTHONPATH} \
    PROMETHEUS_MULTIPROC_DIR=/tmp


# Set the default CMD to print the usage of the language image.
# ENTRYPOINT ["gunicorn"]
CMD ["-m", "gunicorn", "koku.wsgi", "--bind=0.0.0.0:8000", "--access-logfile=-", "--config", "gunicorn_conf.py", "--preload"]
# CMD ["-c", "help('modules')"]
