apiVersion: v1
kind: Template
metadata:
  name: koku-template
  annotations:
    openshift.io/display-name: "Koku"
    description: "Cloud Cost Management powered by Django+PostgreSQL"
    tags: "quickstart,python,django,postgresql"
    iconClass: "icon-python"
    openshift.io/long-description: "This template defines resources needed to run the Koku application, including a build configuration, application deployment configuration, and database deployment configuration."
    openshift.io/provider-display-name: "Red Hat, Inc."
    openshift.io/documentation-url: "https://koku.readthedocs.io/en/latest/"
labels:
  app: koku
  template: koku-template
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: python-36-centos7
    namespace: ${NAMESPACE}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: centos/python-36-centos7
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: postgresql
    namespace: ${NAMESPACE}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: centos/postgresql-96-centos7
        resourceVersion: latest
      name: "9.6"
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: koku
      template: koku-template
    annotations:
      template.openshift.io/expose-database_name: "{.data['database-name']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-user']}"
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${DATABASE_NAME}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: koku
      template: koku-template
    annotations:
      template.openshift.io/expose-django_secret_key: "{.data['django-secret-key']}"
      template.openshift.io/expose-service_admin_username: "{.data['service-admin-user']}"
      template.openshift.io/expose-service_admin_email: "{.data['service-admin-email']}"
      template.openshift.io/expose-service_admin_password: "{.data['service-admin-password']}"
      template.openshift.io/expose-email_service_password: "{.data['email-service-password']}"
      template.openshift.io/expose-aws_access_key_id: "{.data['aws-access-key-id']}"
      template.openshift.io/expose-aws_secret_access_key: "{.data['aws-secret-access-key']}"
    name: ${NAME}-secret
  stringData:
    django-secret-key: ${DJANGO_SECRET_KEY}
    service-admin-user: ${SERVICE_ADMIN_USER}
    service-admin-email: ${SERVICE_ADMIN_EMAIL}
    service-admin-password: ${SERVICE_ADMIN_PASSWORD}
    email-service-password: ${EMAIL_SERVICE_PASSWORD}
    aws-access-key-id: ${AWS_ACCESS_KEY_ID}
    aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: koku-env
    labels:
      name: ${NAME}
  data:
    database-engine: ${DATABASE_ENGINE}
    database-name: ${DATABASE_NAME}
    database-service-name: POSTGRES_SQL
    postgres-sql-service-host: ${NAME}-pgsql.${NAMESPACE}.svc
    postgres-sql-service-port: "5432"
    masu-service-host: ${MASU}.${NAMESPACE}.svc
    masu-service-port: "8080"
    app-config: ${APP_CONFIG}
    app-home: ${APP_HOME}
    app-module: ${APP_MODULE}
    app-namespace: ${NAMESPACE}
    app-domain: ${APP_DOMAIN}
    email-service-host: ${EMAIL_HOST}
    email-service-port: ${EMAIL_PORT}
    email-service-host-user: ${EMAIL_HOST_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
    annotations:
      description: "Keeps track of changes in the application image"
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    resources:
      requests:
        memory: ${BUILD_MEMORY_REQUEST}
      limits:
        memory: ${BUILD_MEMORY_LIMIT}
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        env:
          - name: PIP_INDEX_URL
            value: ${PIP_INDEX_URL}
          - name: PIPENV_PYPI_MIRROR
            value: ${PIPENV_PYPI_MIRROR}
          - name: ENABLE_PIPENV
            value: "true"
          - name: APP_CONFIG
            valueFrom:
              configMapKeyRef:
                name: koku-env
                key: app-config
                optional: false
          - name: APP_HOME
            valueFrom:
              configMapKeyRef:
                name: koku-env
                key: app-home
          - name: APP_MODULE
            valueFrom:
              configMapKeyRef:
                name: koku-env
                key: app-module
          - name: APP_NAMESPACE
            valueFrom:
              configMapKeyRef:
                name: koku-env
                key: app-namespace
          - name: APP_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: koku-env
                key: app-domain
        from:
          kind: ImageStreamTag
          name: python-36-centos7:latest
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    resources:
      requests:
        memory: ${MEMORY_REQUEST}
      limits:
        memory: ${MEMORY_LIMIT}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - name: ${NAME}
          image: ${NAME}
          env:
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
                  optional: false
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
                  optional: false
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: django-secret-key
                  name: ${NAME}-secret
                  optional: false
            - name: SERVICE_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: service-admin-user
                  name: ${NAME}-secret
                  optional: false
            - name: SERVICE_ADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  key: service-admin-email
                  name: ${NAME}-secret
                  optional: false
            - name: SERVICE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: service-admin-password
                  name: ${NAME}-secret
                  optional: false
            - name: EMAIL_HOST_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: email-service-password
                  name: ${NAME}-secret
                  optional: false
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: aws-access-key-id
                  name: ${NAME}-secret
                  optional: false
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: aws-secret-access-key
                  name: ${NAME}-secret
                  optional: false
            - name: DATABASE_ENGINE
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: database-engine
                  optional: false
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: database-name
                  optional: false
            - name: DATABASE_SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: database-service-name
                  optional: false
            - name: POSTGRES_SQL_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: postgres-sql-service-host
                  optional: false
            - name: POSTGRES_SQL_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: postgres-sql-service-port
                  optional: false
            - name: EMAIL_HOST
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: email-service-host
                  optional: false
            - name: EMAIL_PORT
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: email-service-port
                  optional: false
            - name: EMAIL_HOST_USER
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: email-service-host-user
                  optional: false
            - name: MASU_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: masu-service-host
                  optional: false
            - name: MASU_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: masu-service-port
                  optional: false
            - name: APP_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: app-namespace
                  optional: true
            - name: APP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: koku-env
                  key: app-domain
                  optional: true
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/status/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/v1/status/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 3
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
          - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: koku
      template: koku-template
    name: koku-pgsql
  spec:
    replicas: 1
    selector:
      name: koku-pgsql
    resources:
      limits:
        memory: ${MEMORY_REQUEST}
      limits:
        memory: ${MEMORY_LIMIT}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: koku
          name: koku-pgsql
          template: koku-template
        name: koku-pgsql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: postgresql:9.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: koku-pgsql
          ports:
          - containerPort: "5432"
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              memory: ${POSTGRESQL_MEMORY_REQUEST}
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: koku-pgsql-data
        volumes:
        - name: koku-pgsql-data
          persistentVolumeClaim:
            claimName: koku-pgsql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - koku-pgsql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: koku
      template: koku-template
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    labels:
      app: koku
      template: koku-template
    name: koku-pgsql
  spec:
    ports:
    - name: koku-pgsql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
parameters:
- description: The name assigned to all frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: koku
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: project-koku
- description: The name for the masu service
  displayName: Masu
  name: MASU
  required: true
  value: masu
- description: Initial amount of memory the build container will request.
  displayName: Build Memory Request
  name: BUILD_MEMORY_REQUEST
  required: true
  value: 1Gi
- description: Maximum amount of memory the build container can use.
  displayName: Build Memory Limit
  name: BUILD_MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Initial amount of memory the Django container will request.
  displayName: Memory Request
  name: MEMORY_REQUEST
  required: true
  value: 1Gi
- description: Maximum amount of memory the Django container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Initial amount of memory the PostgreSQL container will request.
  displayName: Memory Request (PostgreSQL)
  name: POSTGRESQL_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit (PostgreSQL)
  name: POSTGRESQL_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/project-koku/koku.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: koku-pgsql
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: postgresql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: koku
- displayName: Database Username
  from: 'user_[a-zA-Z0-9]{12}'
  generate: expression
  name: DATABASE_USER
  required: true
- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- displayName: Database Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: Absolute path to Gunicorn configuration file (optional).
  displayName: Application Configuration File Path
  name: APP_CONFIG
  value: /opt/app-root/src/koku/gunicorn.py
- description: Absolute path to application install location (optional).
  displayName: Application Home Directory
  name: APP_HOME
  value: /opt/app-root/src/koku
- description: Python module name of the application (optional).
  displayName: Application Module Name
  name: APP_MODULE
  value: koku.wsgi
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[a-zA-Z0-9]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
- displayName: Service Admin Username
  from: 'user_[a-zA-Z0-9]{12}'
  generate: expression
  name: SERVICE_ADMIN_USER
  required: true
- displayName: Service Admin Email
  value: 'cost-mgmt@project-koku.com'
  name: SERVICE_ADMIN_EMAIL
  required: true
- displayName: Service Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SERVICE_ADMIN_PASSWORD
- displayName: Email Service Host
  value: 'smtp.mailgun.org'
  name: EMAIL_HOST
- displayName: Email Service Port
  value: '587'
  name: EMAIL_PORT
- displayName: Email Service User
  value: 'postmaster@project-koku.com'
  name: EMAIL_HOST_USER
- displayName: Email Service Password
  from: ${EMAIL_SERVICE_PASSWORD}
  name: EMAIL_SERVICE_PASSWORD
- displayName: AWS Access Key ID
  from: ${AWS_ACCESS_KEY_ID}
  name: AWS_ACCESS_KEY_ID
- displayName: AWS Secret Access Key
  from: ${AWS_SECRET_ACCESS_KEY}
  name: AWS_SECRET_ACCESS_KEY
- description: The custom PyPi index URL
  displayName: Custom PyPi Index URL
  name: PIP_INDEX_URL
- description: The custom PipEnv PyPi index URL
  displayName: Custom PipEnv PyPi Index URL
  name: PIPENV_PYPI_MIRROR
- displayName: User Interface Domain
  value: 'project-koku.com'
  name: APP_DOMAIN
- displayName: Upgrade pip
  description: Whether to upgrade pip to latest
  name: UPGRADE_PIP_TO_LATEST
  value: ''
