#
# This template defines secrets used to configure Koku.
#
kind: Template
apiVersion: v1
metadata:
  name: koku-configmap-template
  annotations:
    openshift.io/display-name: "Koku"
    description: "Cloud Cost Management powered by Django+PostgreSQL"
    tags: "quickstart,python,django,postgresql"
    iconClass: "icon-python"
    openshift.io/long-description: "This template defines secret values required to run the Koku application."
    openshift.io/provider-display-name: "Red Hat, Inc."
    openshift.io/documentation-url: "https://koku.readthedocs.io/en/latest/"
labels:
  app: koku
  template: koku-secret
objects:

# database secrets
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: "{.data['database-name']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-db_client_cert: "{.data['db-client-cert']}"
    name: ${NAME}-db
  stringData:
    database-name: ${DATABASE_NAME}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
    database-client-cert: ${DATABASE_CLIENT_CERT}

# django secrets
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-django_secret_key: "{.data['django-secret-key']}"
    name: ${NAME}-secret
  stringData:
    django-secret-key: ${DJANGO_SECRET_KEY}

# AWS secrets
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-aws_access_key_id: "{.data['aws-access-key-id']}"
      template.openshift.io/expose-aws_secret_access_key: "{.data['aws-secret-access-key']}"
      template.openshift.io/expose-access_key: "{.data['cloudwatch-aws-access-key-id']}"
      template.openshift.io/expose-secret: "{.data['cloudwatch-aws-secret-access-key']}"
      template.openshift.io/expose-region: "{.data['cloudwatch-aws-region']}"
      template.openshift.io/expose-log_group: "{.data['cloudwatch-log-group']}"
    name: ${NAME}-aws
  stringData:
    aws-access-key-id: ${AWS_ACCESS_KEY_ID}
    aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
    cloudwatch-aws-access-key-id: ${CLOUDWATCH_AWS_ACCESS_KEY_ID}
    cloudwatch-aws-secret-access-key: ${CLOUDWATCH_AWS_SECRET_ACCESS_KEY}
    cloudwatch-aws-region: 'us-east-1'
    cloudwatch-log-group: ${CLOUDWATCH_LOG_GROUP}

# optional flower (celery) secrets
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}-flower
  stringData:
    flower-auth-scheme: ${FLOWER_AUTH_SCHEME}
    flower-basic-auth-params: ${FLOWER_BASIC_AUTH_PARAMS}
    flower-oauth2-key: ${FLOWER_OAUTH2_KEY}
    flower-oauth2-secret: ${FLOWER_OAUTH2_SECRET}
    flower-oauth2-redirect-uri: ${FLOWER_OAUTH2_REDIRECT_URI}
    flower-oauth2-domains: ${FLOWER_OAUTH2_DOMAINS}

parameters:
- description: The name assigned to all frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: koku

# database params
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: koku
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: koku
- displayName: Database Username
  from: 'user_[a-zA-Z0-9]{12}'
  generate: expression
  name: DATABASE_USER
  required: true
- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
  required: true
- displayName: Database Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
  required: true
- displayName: Database Client Certificate
  name: DATABASE_CLIENT_CERT
  required: false

# application secret keys
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[a-zA-Z0-9]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
  required: true
- description: Set this to a long random string.
  displayName: Application Secret Key
  from: '[a-zA-Z0-9]{50}'
  generate: expression
  name: MASU_SECRET_KEY
  required: true

# Primary AWS account creds
- displayName: AWS Access Key ID
  from: ${AWS_ACCESS_KEY_ID}
  name: AWS_ACCESS_KEY_ID
  required: true
- displayName: AWS Secret Access Key
  from: ${AWS_SECRET_ACCESS_KEY}
  name: AWS_SECRET_ACCESS_KEY
  required: true

# cloudwatch account creds
- displayName: Cloud Watch Amazon Web Services Access ID
  required: false
  name: CLOUDWATCH_AWS_ACCESS_KEY_ID
- displayName: Cloud Watch Amazon Web Services Secret Access Key
  required: false
  name: CLOUDWATCH_AWS_SECRET_ACCESS_KEY
- displayName: Cloud Watch Amazon Web Services Logging Group
  required: false
  name: CLOUDWATCH_LOG_GROUP

# (optional) flower params
- description: One of 'basic', 'google', or 'github'
  displayName: Flower auth scheme
  name: FLOWER_AUTH_SCHEME
  required: false
- description: Flower basic auth parameters
  displayName: Flower basic auth parameters
  name: FLOWER_BASIC_AUTH_PARAMS
  required: false
- description: Flower OAuth2 key
  displayName: Flower OAuth2 key
  name: FLOWER_OAUTH2_KEY
  required: false
- description: Flower OAuth2 secret
  displayName: Flower OAuth2 secret
  name: FLOWER_OAUTH2_SECRET
  required: false
- description: Flower OAuth2 redirect URI
  displayName: Flower OAuth2 redirect URI
  name: FLOWER_OAUTH2_REDIRECT_URI
  required: false
  value: 'http://flower.example.com/login'
- description: Flower OAuth2 whitelisted domains
  displayName: Flower OAuth2 whitelisted domains
  name: FLOWER_OAUTH2_DOMAINS
  required: false
  value: '.*@example\.com'
