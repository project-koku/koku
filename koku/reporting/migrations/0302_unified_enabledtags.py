<<<<<<< HEAD
# Generated by Django 3.2.20 on 2023-07-24 19:31
=======
# Generated by Django 3.2.19 on 2023-06-06 12:00
# Generated by Django 3.2.19 on 2023-06-01 13:41
>>>>>>> d14cd2b63 (Uptick Migrations.)
import uuid
import functools

from django.db import migrations
from django.db import models


def migrate_tags(apps, schema_editor, provider):
    EnabledTagKeys = apps.get_model("reporting", "EnabledTagKeys")
    ProviderEnabledTagKeys = apps.get_model("reporting", f"{provider}EnabledTagKeys")
    db_alias = schema_editor.connection.alias

    records = []
    for record in ProviderEnabledTagKeys.objects.using(db_alias).all():
        records.append(EnabledTagKeys(key=record.key, enabled=record.enabled, provider_type=provider))

    EnabledTagKeys.objects.using(db_alias).bulk_create(records)


def unmigrate_tags(apps, schema_editor, provider):
    EnabledTagKeys = apps.get_model("reporting", "EnabledTagKeys")
    db_alias = schema_editor.connection.alias

    EnabledTagKeys.objects.using(db_alias).filter(provider_type__exact=provider).delete()


migrate_tags_aws = functools.partial(migrate_tags, provider="AWS")
migrate_tags_azure = functools.partial(migrate_tags, provider="Azure")
migrate_tags_gcp = functools.partial(migrate_tags, provider="GCP")
migrate_tags_oci = functools.partial(migrate_tags, provider="OCI")
migrate_tags_ocp = functools.partial(migrate_tags, provider="OCP")

unmigrate_tags_aws = functools.partial(unmigrate_tags, provider="AWS")
unmigrate_tags_azure = functools.partial(unmigrate_tags, provider="Azure")
unmigrate_tags_gcp = functools.partial(unmigrate_tags, provider="GCP")
unmigrate_tags_oci = functools.partial(unmigrate_tags, provider="OCI")
unmigrate_tags_ocp = functools.partial(unmigrate_tags, provider="OCP")


class Migration(migrations.Migration):

    dependencies = [
        ("reporting", "0301_create_ocppod_by_node_p"),
    ]

    operations = [
        migrations.CreateModel(
            name="EnabledTagKeys",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("key", models.CharField(max_length=512)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "provider_type",
                    models.CharField(
                        choices=[
                            ("AWS", "AWS"),
                            ("OCP", "OCP"),
                            ("Azure", "Azure"),
                            ("GCP", "GCP"),
                            ("IBM", "IBM"),
                            ("OCI", "OCI"),
                            ("AWS-local", "AWS-local"),
                            ("Azure-local", "Azure-local"),
                            ("GCP-local", "GCP-local"),
                            ("IBM-local", "IBM-local"),
                            ("OCI-local", "OCI-local"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
            options={
                "db_table": "reporting_enabledtagkeys",
            },
        ),
        migrations.AddIndex(
            model_name="enabledtagkeys",
            index=models.Index(fields=["key", "enabled"], name="tag_enabled_key_index"),
        ),
        migrations.AddIndex(
            model_name="enabledtagkeys",
            index=models.Index(fields=["provider_type"], name="tag_provider_type_index"),
        ),
        migrations.AlterUniqueTogether(
            name="enabledtagkeys",
            unique_together={("key", "provider_type")},
        ),
    ]
