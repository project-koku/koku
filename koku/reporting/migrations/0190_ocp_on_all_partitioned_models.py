# Generated by Django 3.1.13 on 2021-08-18 21:09
import pkgutil

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations
from django.db import models

from koku.database import get_model
from koku.database import set_partition_mode
from koku.database import unset_partition_mode
from reporting.provider.all.openshift.models import VIEWS as OCP_ALL_VIEWS


OCPALL_PARTITIONS_SQL = f"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH start_end_date as (
    SELECT min(r.partition_start) as partition_start,
           max(r.partition_end) as partition_end
      FROM (
          SELECT max(date_trunc('month', usage_start)) - '2 months'::interval as partition_start,
                 max(date_trunc('month', usage_start)) as partition_end
            FROM reporting_ocpawscostlineitem_daily_summary
           UNION
          SELECT max(date_trunc('month', usage_start)) - '2 months'::interval as partition_start,
                 max(date_trunc('month', usage_start)) as partition_end
            FROM reporting_ocpazurecostlineitem_daily_summary
      ) r
),
partitions as (
    SELECT partition_start::date
      FROM generate_series(
               (SELECT partition_start from start_end_date),
               (SELECT partition_end from start_end_date),
               '1 month'::interval
           ) partition_start
)
SELECT current_schema,
       '{get_model("OCPAllCostLineItemDailySummaryP")._meta.db_table}_' || to_char(p.partition_start, 'YYYY_MM'),
       '{get_model("OCPAllCostLineItemDailySummaryP")._meta.db_table}',
       'range',
       'usage_start',
       jsonb_build_object(
           'default', false,
           'from', p.partition_start::text,
           'to', (p.partition_start + '1 month'::interval)::text
       ),
       true
  FROM partitions p;
"""


COPY_OCPALL_SQL = f"""
INSERT
  INTO {get_model("OCPAllCostLineItemDailySummaryP")._meta.db_table}
       (
           source_type,
           cluster_id,
           cluster_alias,
           namespace,
           node,
           resource_id,
           usage_start,
           usage_end,
           usage_account_id,
           account_alias_id,
           product_code,
           product_family,
           instance_type,
           region,
           availability_zone,
           tags,
           usage_amount,
           unit,
           unblended_cost,
           markup_cost,
           currency_code,
           shared_projects,
           source_uuid
       )
SELECT  lids.source_type,
        lids.cluster_id,
        max(lids.cluster_alias) as cluster_alias,
        lids.namespace,
        lids.node,
        lids.resource_id,
        lids.usage_start,
        lids.usage_start as usage_end,
        lids.usage_account_id,
        max(lids.account_alias_id) as account_alias_id,
        lids.product_code,
        lids.product_family,
        lids.instance_type,
        lids.region,
        lids.availability_zone,
        lids.tags,
        sum(lids.usage_amount) as usage_amount,
        max(lids.unit) as unit,
        sum(lids.unblended_cost) as unblended_cost,
        sum(lids.markup_cost) as markup_cost,
        max(lids.currency_code) as currency_code,
        max(lids.shared_projects) as shared_projects,
        max(lids.source_uuid::text)::uuid as source_uuid
  FROM (
         SELECT 'AWS'::text AS source_type,
                aws.cluster_id,
                aws.cluster_alias,
                aws.namespace,
                aws.node,
                aws.resource_id,
                aws.usage_start,
                aws.usage_end,
                aws.usage_account_id,
                aws.account_alias_id,
                aws.product_code,
                aws.product_family,
                aws.instance_type,
                aws.region,
                aws.availability_zone,
                aws.tags,
                aws.usage_amount,
                aws.unit,
                aws.unblended_cost,
                aws.markup_cost,
                aws.currency_code,
                aws.shared_projects,
                aws.source_uuid
           FROM reporting_ocpawscostlineitem_daily_summary AS aws
          WHERE aws.usage_start >= date_trunc(
                                      'month',
                                      (select coalesce(max(usage_start), '1970-01-01'::date) from reporting_ocpallcostlineitem_daily_summary)
                                  )::date
          UNION
         SELECT 'Azure'::text AS source_type,
                azure.cluster_id,
                azure.cluster_alias,
                azure.namespace,
                azure.node,
                azure.resource_id,
                azure.usage_start,
                azure.usage_end,
                azure.subscription_guid AS usage_account_id,
                NULL::integer AS account_alias_id,
                azure.service_name AS product_code,
                NULL::character varying AS product_family,
                azure.instance_type,
                azure.resource_location AS region,
                NULL::character varying AS availability_zone,
                azure.tags,
                azure.usage_quantity AS usage_amount,
                azure.unit_of_measure AS unit,
                azure.pretax_cost AS unblended_cost,
                azure.markup_cost,
                azure.currency AS currency_code,
                azure.shared_projects,
                azure.source_uuid
           FROM reporting_ocpazurecostlineitem_daily_summary AS azure
          WHERE azure.usage_start >= date_trunc(
                                        'month',
                                        (select coalesce(max(usage_start), '1970-01-01'::date) from reporting_ocpallcostlineitem_daily_summary)
                                    )::date
       ) AS lids
 GROUP
    BY lids.source_type,
       lids.cluster_id,
       lids.cluster_alias,
       lids.namespace,
       lids.node,
       lids.resource_id,
       lids.usage_start,
       lids.usage_account_id,
       lids.account_alias_id,
       lids.product_code,
       lids.product_family,
       lids.instance_type,
       lids.region,
       lids.availability_zone,
       lids.tags
;
"""


OCPALL_PROJECT_PARTITIONS_SQL = f"""
INSERT
  INTO partitioned_tables
       (
           schema_name,
           table_name,
           partition_of_table_name,
           partition_type,
           partition_col,
           partition_parameters,
           active
       )
WITH start_end_date as (
    SELECT min(r.partition_start) as partition_start,
           max(r.partition_end) as partition_end
      FROM (
          SELECT max(date_trunc('month', usage_start)) - '2 months'::interval as partition_start,
                 max(date_trunc('month', usage_start)) as partition_end
            FROM reporting_ocpawscostlineitem_project_daily_summary
           UNION
          SELECT max(date_trunc('month', usage_start)) - '2 months'::interval as partition_start,
                 max(date_trunc('month', usage_start)) as partition_end
            FROM reporting_ocpazurecostlineitem_project_daily_summary
      ) r
),
partitions as (
    SELECT partition_start::date
      FROM generate_series(
               (SELECT partition_start from start_end_date),
               (SELECT partition_end from start_end_date),
               '1 month'::interval
           ) partition_start
)
SELECT current_schema,
       '{get_model("OCPAllCostLineItemProjectDailySummaryP")._meta.db_table}_' || to_char(p.partition_start, 'YYYY_MM'),
       '{get_model("OCPAllCostLineItemProjectDailySummaryP")._meta.db_table}',
       'range',
       'usage_start',
       jsonb_build_object(
           'default', false,
           'from', p.partition_start::text,
           'to', (p.partition_start + '1 month'::interval)::text
       ),
       true
  FROM partitions p;
"""


COPY_OCPALL_PROJECT_SQL = f"""
INSERT
  INTO {get_model("OCPAllCostLineItemProjectDailySummaryP")._meta.db_table}
       (
           source_type,
           cluster_id,
           cluster_alias,
           data_source,
           namespace,
           node,
           pod_labels,
           resource_id,
           usage_start,
           usage_end,
           usage_account_id,
           account_alias_id,
           product_code,
           product_family,
           instance_type,
           region,
           availability_zone,
           usage_amount,
           unit,
           unblended_cost,
           project_markup_cost,
           pod_cost,
           currency_code,
           source_uuid
       )
SELECT 'AWS' as source_type,
       cluster_id,
       max(cluster_alias) as cluster_alias,
       data_source,
       namespace::text as namespace,
       node::text as node,
       pod_labels,
       resource_id,
       usage_start,
       usage_end,
       usage_account_id,
       max(account_alias_id) as account_alias_id,
       product_code,
       product_family,
       instance_type,
       region,
       availability_zone,
       sum(usage_amount) as usage_amount,
       max(unit) as unit,
       sum(unblended_cost) as unblended_cost,
       sum(project_markup_cost) as project_markup_cost,
       sum(pod_cost) as pod_cost,
       max(currency_code) as currency_code,
       max(source_uuid::text)::uuid as source_uuid
 FROM reporting_ocpawscostlineitem_project_daily_summary
 WHERE usage_start >= date_trunc(
                          'month',
                          (select coalesce(max(usage_start), '1970-01-01'::date) from reporting_ocpallcostlineitem_project_daily_summary)
                      )::date
 GROUP
    BY source_type,
       usage_start,
       usage_end,
       cluster_id,
       data_source,
       namespace,
       node,
       usage_account_id,
       resource_id,
       product_code,
       product_family,
       instance_type,
       region,
       availability_zone,
       pod_labels
 UNION
SELECT 'Azure' as source_type,
       cluster_id,
       max(cluster_alias) as cluster_alias,
       data_source,
       namespace::text as namespace,
       node::text as node,
       pod_labels,
       resource_id,
       usage_start,
       usage_end,
       subscription_guid as usage_account_id,
       NULL::int as account_alias_id,
       service_name as product_code,
       NULL as product_family,
       instance_type,
       resource_location as region,
       NULL as availability_zone,
       sum(usage_quantity) as usage_amount,
       max(unit_of_measure) as unit,
       sum(pretax_cost) as unblended_cost,
       sum(project_markup_cost) as project_markup_cost,
       sum(pod_cost) as pod_cost,
       max(currency) as currency_code,
       max(source_uuid::text)::uuid as source_uuid
  FROM reporting_ocpazurecostlineitem_project_daily_summary
 WHERE usage_start >= date_trunc(
                          'month',
                          (select coalesce(max(usage_start), '1970-01-01'::date) from reporting_ocpallcostlineitem_project_daily_summary)
                      )::date
 GROUP
    BY source_type,
       usage_start,
       usage_end,
       cluster_id,
       data_source,
       namespace,
       node,
       usage_account_id,
       resource_id,
       product_code,
       product_family,
       instance_type,
       region,
       availability_zone,
       pod_labels
;
"""


def create_new_ocpall_matviews(apps, schema_editor):
    version = "_20210818"
    conn = schema_editor.connection
    converted_views = (
        "reporting_ocpallcostlineitem_daily_summary",
        "reporting_ocpallcostlineitem_project_daily_summary",
    )
    ocpallviews = [v for v in OCP_ALL_VIEWS if v not in converted_views]
    for view in ocpallviews:
        new_view = f"{view}_p{version}.sql"
        view_sql = pkgutil.get_data("reporting.provider.all.openshift", f"sql/views/{version}/{new_view}")
        view_sql = view_sql.decode("utf-8")
        with conn.cursor() as cur:
            cur.execute(view_sql)


def drop_new_ocpall_matviews(apps, schema_editor):
    conn = schema_editor.connection
    converted_views = (
        "reporting_ocpallcostlineitem_daily_summary",
        "reporting_ocpallcostlineitem_project_daily_summary",
    )
    ocpallviews = [v for v in OCP_ALL_VIEWS if v not in converted_views]
    for view in ocpallviews:
        new_view = f"{view}_p"
        with conn.cursor() as cur:
            cur.execute(f"DROP MATERIALIZED VIEW IF EXISTS {new_view} ;")


class Migration(migrations.Migration):

    dependencies = [("reporting", "0001_initial-from-template")]

    operations = [
        migrations.RunPython(code=set_partition_mode, reverse_code=unset_partition_mode),
        migrations.CreateModel(
            name="OCPAllCostLineItemProjectDailySummaryP",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("source_type", models.TextField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("data_source", models.CharField(max_length=64, null=True)),
                ("namespace", models.CharField(max_length=253)),
                ("node", models.CharField(max_length=253, null=True)),
                ("pod_labels", models.JSONField(null=True)),
                ("resource_id", models.CharField(max_length=253, null=True)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("usage_account_id", models.CharField(max_length=50)),
                ("product_code", models.CharField(max_length=50)),
                ("product_family", models.CharField(max_length=150, null=True)),
                ("instance_type", models.CharField(max_length=50, null=True)),
                ("region", models.CharField(max_length=50, null=True)),
                ("availability_zone", models.CharField(max_length=50, null=True)),
                ("usage_amount", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("project_markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("pod_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("source_uuid", models.UUIDField(null=True)),
                (
                    "account_alias",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="reporting.awsaccountalias"
                    ),
                ),
            ],
            options={"db_table": "reporting_ocpallcostlineitem_project_daily_summary_p"},
        ),
        migrations.RunSQL(
            """
ALTER TABLE reporting_ocpallcostlineitem_project_daily_summary_p
      ALTER COLUMN "id" SET DEFAULT uuid_generate_v4();
"""
        ),
        migrations.CreateModel(
            name="OCPAllCostLineItemDailySummaryP",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("source_type", models.TextField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                (
                    "namespace",
                    django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=253), size=None),
                ),
                ("node", models.CharField(max_length=253, null=True)),
                ("resource_id", models.CharField(max_length=253, null=True)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("usage_account_id", models.CharField(max_length=50)),
                ("product_code", models.CharField(max_length=50)),
                ("product_family", models.CharField(max_length=150, null=True)),
                ("instance_type", models.CharField(max_length=50, null=True)),
                ("region", models.CharField(max_length=50, null=True)),
                ("availability_zone", models.CharField(max_length=50, null=True)),
                ("tags", models.JSONField(null=True)),
                ("usage_amount", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("shared_projects", models.IntegerField(default=1)),
                ("source_uuid", models.UUIDField(null=True)),
                (
                    "account_alias",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="reporting.awsaccountalias"
                    ),
                ),
            ],
            options={"db_table": "reporting_ocpallcostlineitem_daily_summary_p"},
        ),
        migrations.RunSQL(
            """
ALTER TABLE reporting_ocpallcostlineitem_daily_summary_p
      ALTER COLUMN "id" SET DEFAULT uuid_generate_v4();
"""
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["usage_start"], name="ocpallp_p_proj_usage_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["namespace"], name="ocpallp_p_proj_namespace_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["node"], name="ocpallp_p_proj_node_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["resource_id"], name="ocpallp_p_proj_resource_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["pod_labels"], name="ocpallp_p_proj_pod_labels_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["product_family"], name="ocpallp_p_proj_prod_fam_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemprojectdailysummaryp",
            index=models.Index(fields=["instance_type"], name="ocpallp_p_proj_inst_type_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["usage_start"], name="ocpall_p_usage_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["namespace"], name="ocpall_p_namespace_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["node"], name="ocpall_p_node_idx", opclasses=["varchar_pattern_ops"]),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["resource_id"], name="ocpall_p_resource_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=django.contrib.postgres.indexes.GinIndex(fields=["tags"], name="ocpall_p_tags_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["product_family"], name="ocpall_p_product_family_idx"),
        ),
        migrations.AddIndex(
            model_name="ocpallcostlineitemdailysummaryp",
            index=models.Index(fields=["instance_type"], name="ocpall_p_instance_type_idx"),
        ),
        migrations.RunPython(code=unset_partition_mode, reverse_code=set_partition_mode),
        migrations.RunSQL(OCPALL_PROJECT_PARTITIONS_SQL, reverse_sql="select 1"),
        migrations.RunSQL(OCPALL_PARTITIONS_SQL, reverse_sql="select 1"),
        migrations.RunSQL(COPY_OCPALL_PROJECT_SQL, reverse_sql="select 1"),
        migrations.RunSQL(COPY_OCPALL_SQL, reverse_sql="select 1"),
        migrations.RunPython(code=create_new_ocpall_matviews, reverse_code=drop_new_ocpall_matviews),
        migrations.CreateModel(
            name="OCPAllComputeSummaryP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("product_code", models.CharField(max_length=50)),
                ("instance_type", models.CharField(max_length=50)),
                ("resource_id", models.CharField(max_length=253)),
                ("usage_amount", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_compute_summary_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllCostSummaryByAccountP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("unblended_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("currency_code", models.CharField(max_length=10)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_cost_summary_by_account_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllCostSummaryByRegionP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("region", models.CharField(max_length=50, null=True)),
                ("availability_zone", models.CharField(max_length=50, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("currency_code", models.CharField(max_length=10)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_cost_summary_by_region_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllCostSummaryByServiceP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("product_code", models.CharField(max_length=50)),
                ("product_family", models.CharField(max_length=150, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("currency_code", models.CharField(max_length=10)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_cost_summary_by_service_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllCostSummaryP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("currency_code", models.CharField(max_length=10)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_cost_summary_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllDatabaseSummaryP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("product_code", models.CharField(max_length=50)),
                ("usage_amount", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_database_summary_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllNetworkSummaryP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("product_code", models.CharField(max_length=50)),
                ("usage_amount", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_network_summary_p", "managed": False},
        ),
        migrations.CreateModel(
            name="OCPAllStorageSummaryP",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("cluster_id", models.CharField(max_length=50, null=True)),
                ("cluster_alias", models.CharField(max_length=256, null=True)),
                ("usage_account_id", models.CharField(max_length=50)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField()),
                ("product_family", models.CharField(max_length=150, null=True)),
                ("product_code", models.CharField(max_length=50)),
                ("usage_amount", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("unblended_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=15, max_digits=30, null=True)),
                ("currency_code", models.CharField(max_length=10, null=True)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_ocpall_storage_summary_p", "managed": False},
        ),
    ]
