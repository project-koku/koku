# Generated by Django 2.2.12 on 2020-05-13 19:10
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [("reporting", "0113_aws_organizational_units")]

    operations = [
        migrations.RunSQL(
            # Got to drop these views as we are changing the type of a selected column
            # They will be recreated below
            sql="""
DROP INDEX IF EXISTS aws_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary;

DROP INDEX IF EXISTS aws_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_account;

DROP INDEX IF EXISTS aws_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_service;

DROP INDEX IF EXISTS aws_cost_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_region;

DROP INDEX IF EXISTS aws_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary;

DROP INDEX IF EXISTS aws_compute_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_account;

DROP INDEX IF EXISTS aws_compute_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_region;

DROP INDEX IF EXISTS aws_compute_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_service;

DROP INDEX IF EXISTS aws_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary;

DROP INDEX IF EXISTS aws_storage_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_account;

DROP INDEX IF EXISTS aws_storage_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_region;

DROP INDEX IF EXISTS aws_storage_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_service;

DROP INDEX IF EXISTS aws_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_database_summary;

DROP INDEX IF EXISTS aws_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_aws_network_summary;

DROP INDEX IF EXISTS azure_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary;

DROP INDEX IF EXISTS azure_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_account;

DROP INDEX IF EXISTS azure_cost_summary_location;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_location;

DROP INDEX IF EXISTS azure_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_service;

DROP INDEX IF EXISTS azure_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_compute_summary;

DROP INDEX IF EXISTS azure_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_storage_summary;

DROP INDEX IF EXISTS azure_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_network_summary;

DROP INDEX IF EXISTS azure_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_azure_database_summary;

DROP INDEX IF EXISTS ocp_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_cost_summary;

DROP INDEX IF EXISTS ocp_cost_summary_by_node;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_cost_summary_by_node;

DROP INDEX IF EXISTS ocp_cost_summary_by_project;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_cost_summary_by_project;

DROP INDEX IF EXISTS ocp_pod_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_pod_summary;

DROP INDEX IF EXISTS ocp_pod_summary_by_project;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_pod_summary_by_project;

DROP INDEX IF EXISTS ocp_volume_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_volume_summary;

DROP INDEX IF EXISTS ocp_volume_summary_by_project;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocp_volume_summary_by_project;

DROP INDEX IF EXISTS ocpaws_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary;

DROP INDEX IF EXISTS ocpaws_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_account;

DROP INDEX IF EXISTS ocpaws_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_service;

DROP INDEX IF EXISTS ocpaws_cost_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_region;

DROP INDEX IF EXISTS ocpaws_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_compute_summary;

DROP INDEX IF EXISTS ocpaws_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_storage_summary;

DROP INDEX IF EXISTS ocpaws_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_network_summary;

DROP INDEX IF EXISTS ocpaws_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_database_summary;

DROP INDEX IF EXISTS ocpazure_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary;

DROP INDEX IF EXISTS ocpazure_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_account;

DROP INDEX IF EXISTS ocpazure_cost_summary_location;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_location;

DROP INDEX IF EXISTS ocpazure_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_service;

DROP INDEX IF EXISTS ocpazure_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_compute_summary;

DROP INDEX IF EXISTS ocpazure_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_storage_summary;

DROP INDEX IF EXISTS ocpazure_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_network_summary;

DROP INDEX IF EXISTS ocpazure_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_database_summary;

DROP INDEX IF EXISTS ocpall_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_storage_summary;

DROP INDEX IF EXISTS ocpall_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_network_summary;

DROP INDEX IF EXISTS ocpall_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_database_summary;

DROP INDEX IF EXISTS ocpall_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_compute_summary;

DROP INDEX IF EXISTS ocpall_cost_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_region;

DROP INDEX IF EXISTS ocpall_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_service;

DROP INDEX IF EXISTS ocpall_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_account;

DROP INDEX IF EXISTS ocpall_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary;

DROP INDEX IF EXISTS ocpallcstprjdlysumm_node;
DROP INDEX IF EXISTS ocpallcstprjdlysumm_nsp;
DROP INDEX IF EXISTS ocpallcstprjdlysumm_node_like;
DROP INDEX IF EXISTS ocpallcstprjdlysumm_nsp_like;
DROP INDEX IF EXISTS ocpall_product_family_ilike;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpallcostlineitem_project_daily_summary;

DROP INDEX IF EXISTS ocpallcstdlysumm_node;
DROP INDEX IF EXISTS ocpallcstdlysumm_node_like;
DROP INDEX IF EXISTS ocpallcstdlysumm_nsp;
DROP INDEX IF EXISTS ocpall_product_code_ilike;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpallcostlineitem_daily_summary;
            """
        ),
        migrations.AddField(
            model_name="awscostentrylineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="azurecostentrylineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpazurecostlineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpazurecostlineitemprojectdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpawscostlineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpawscostlineitemprojectdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpusagelineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.RunSQL(
            sql="""
CREATE MATERIALIZED VIEW reporting_aws_cost_summary AS(
    SELECT row_number() OVER(ORDER BY date(usage_start)) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), source_uuid
)
;

CREATE UNIQUE INDEX aws_cost_summary
ON reporting_aws_cost_summary (usage_start, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), usage_account_id, account_alias_id) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        usage_account_id,
        account_alias_id,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), usage_account_id, account_alias_id, source_uuid
)
;

CREATE UNIQUE INDEX aws_cost_summary_account
ON reporting_aws_cost_summary_by_account (usage_start, usage_account_id, account_alias_id, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), product_code, product_family) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        product_code,
        product_family,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), product_code, product_family, source_uuid
)
;

CREATE UNIQUE INDEX aws_cost_summary_service
ON reporting_aws_cost_summary_by_service (usage_start, product_code, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_region AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), region, availability_zone) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        region,
        availability_zone,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), region, availability_zone, source_uuid
)
;

CREATE UNIQUE INDEX aws_cost_summary_region
ON reporting_aws_cost_summary_by_region (usage_start, region, availability_zone, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_compute_summary AS(
SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.instance_type) AS id,
       c.usage_start,
       c.usage_start as usage_end,
       c.instance_type,
       r.resource_ids,
       CARDINALITY(r.resource_ids) AS resource_count,
       c.usage_amount,
       c.unit,
       c.unblended_cost,
       c.markup_cost,
       c.currency_code,
       c.source_uuid
  FROM (
        -- this group by gets the counts
         SELECT usage_start,
                instance_type,
                SUM(usage_amount) AS usage_amount,
                MAX(unit) AS unit,
                SUM(unblended_cost) AS unblended_cost,
                SUM(markup_cost) AS markup_cost,
                MAX(currency_code) AS currency_code,
                source_uuid
           FROM reporting_awscostentrylineitem_daily_summary
          WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
            AND instance_type IS NOT NULL
          GROUP
             BY usage_start,
                instance_type,
                source_uuid
       ) AS c
  JOIN (
        -- this group by gets the distinct resources running by day
         SELECT usage_start,
                instance_type,
                ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) as resource_ids
           FROM (
                  SELECT usage_start,
                         instance_type,
                         UNNEST(resource_ids) AS resource_id
                    FROM reporting_awscostentrylineitem_daily_summary
                   WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                     AND instance_type IS NOT NULL
                ) AS x
          GROUP
             BY usage_start,
                instance_type
       ) AS r
    ON c.usage_start = r.usage_start
   AND c.instance_type = r.instance_type
       )
  WITH DATA
       ;

CREATE UNIQUE INDEX aws_compute_summary
    ON reporting_aws_compute_summary (usage_start, instance_type, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_account AS (
SELECT ROW_NUMBER() OVER (ORDER BY c.usage_start, c.usage_account_id, c.account_alias_id, c.instance_type) as id,
       c.usage_start,
       c.usage_start AS usage_end,
       c.usage_account_id,
       c.account_alias_id,
       c.instance_type,
       r.resource_ids,
       CARDINALITY(r.resource_ids) AS resource_count,
       c.usage_amount,
       c.unit,
       c.unblended_cost,
       c.markup_cost,
       c.currency_code,
       c.source_uuid
  FROM (
         -- this group by gets the counts
         SELECT usage_start,
                usage_account_id,
                account_alias_id,
                instance_type,
                SUM(usage_amount) AS usage_amount,
                MAX(unit) AS unit,
                SUM(unblended_cost) AS unblended_cost,
                SUM(markup_cost) AS markup_cost,
                MAX(currency_code) AS currency_code,
                source_uuid
           FROM reporting_awscostentrylineitem_daily_summary
          WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
            AND instance_type IS NOT NULL
          GROUP
             BY usage_start,
                usage_account_id,
                account_alias_id,
                instance_type,
                source_uuid
       ) AS c
  JOIN (
         -- this group by gets the distinct resources running by day
         SELECT usage_start,
                usage_account_id,
                account_alias_id,
                instance_type,
                array_agg(distinct resource_id order by resource_id) as resource_ids
           FROM (
                  SELECT usage_start,
                         usage_account_id,
                         account_alias_id,
                         instance_type,
                         UNNEST(resource_ids) as resource_id
                    FROM reporting_awscostentrylineitem_daily_summary
                   WHERE usage_start >= date_trunc('month', NOW() - '1 month'::interval)::date
                     AND instance_type IS NOT NULL
                ) AS x
          GROUP
             BY usage_start,
               usage_account_id,
               account_alias_id,
               instance_type
       ) AS r
    ON c.usage_start = r.usage_start
   AND c.instance_type = r.instance_type
   AND (
         (c.usage_account_id = r.usage_account_id) OR
         (c.account_alias_id = r.account_alias_id)
       )
     )
  WITH DATA
    ;

CREATE UNIQUE INDEX aws_compute_summary_account
    ON reporting_aws_compute_summary_by_account (usage_start, usage_account_id, account_alias_id, instance_type, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_region AS(
SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.region, c.availability_zone, c.instance_type) AS id,
       c.usage_start,
       c.usage_start AS usage_end,
       c.region,
       c.availability_zone,
       c.instance_type,
       r.resource_ids,
       CARDINALITY(r.resource_ids) AS resource_count,
       c.usage_amount,
       c.unit,
       c.unblended_cost,
       c.markup_cost,
       c.currency_code,
       c.source_uuid
  FROM (
        -- this group by gets the counts
         SELECT usage_start,
                region,
                availability_zone,
                instance_type,
                SUM(usage_amount) AS usage_amount,
                MAX(unit) AS unit,
                SUM(unblended_cost) AS unblended_cost,
                SUM(markup_cost) AS markup_cost,
                MAX(currency_code) AS currency_code,
                source_uuid
           FROM reporting_awscostentrylineitem_daily_summary
          WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
            AND instance_type IS NOT NULL
          GROUP
             BY usage_start,
                region,
                availability_zone,
                instance_type,
                source_uuid
       ) AS c
  JOIN (
        -- this group by gets the distinct resources running by day
         SELECT usage_start,
                region,
                availability_zone,
                instance_type,
                ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) AS resource_ids
           from (
                  SELECT usage_start,
                         region,
                         availability_zone,
                         instance_type,
                         UNNEST(resource_ids) AS resource_id
                    FROM reporting_awscostentrylineitem_daily_summary
                   WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                     AND instance_type IS NOT NULL
                ) AS x
          GROUP
             BY usage_start,
                region,
                availability_zone,
                instance_type
       ) AS r
    ON c.usage_start = r.usage_start
   AND c.region = r.region
   AND c.availability_zone = r.availability_zone
   AND c.instance_type = r.instance_type
       )
  WITH DATA
       ;

CREATE UNIQUE INDEX aws_compute_summary_region
    ON reporting_aws_compute_summary_by_region (usage_start, region, availability_zone, instance_type, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_service AS(
SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.product_code, c.product_family, c.instance_type) AS id,
       c.usage_start,
       c.usage_start as usage_end,
       c.product_code,
       c.product_family,
       c.instance_type,
       r.resource_ids,
       CARDINALITY(r.resource_ids) AS resource_count,
       c.usage_amount,
       c.unit,
       c.unblended_cost,
       c.markup_cost,
       c.currency_code,
       c.source_uuid
  FROM (
        -- this group by gets the counts
         SELECT usage_start,
                product_code,
                product_family,
                instance_type,
                SUM(usage_amount) AS usage_amount,
                MAX(unit) AS unit,
                SUM(unblended_cost) AS unblended_cost,
                SUM(markup_cost) AS markup_cost,
                MAX(currency_code) AS currency_code,
                source_uuid
           FROM reporting_awscostentrylineitem_daily_summary
          WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
            AND instance_type IS NOT NULL
          GROUP
             BY usage_start,
                product_code,
                product_family,
                instance_type,
                source_uuid
       ) AS c
  JOIN (
        -- this group by gets the distinct resources running by day
         SELECT usage_start,
                product_code,
                product_family,
                instance_type,
                ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) as resource_ids
           from (
                  SELECT usage_start,
                         product_code,
                         product_family,
                         instance_type,
                         UNNEST(resource_ids) AS resource_id
                    FROM reporting_awscostentrylineitem_daily_summary
                   WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                     AND instance_type IS NOT NULL
                ) AS x
          GROUP
             BY usage_start,
                product_code,
                product_family,
                instance_type
       ) AS r
    ON c.usage_start = r.usage_start
   AND c.product_code = r.product_code
   AND c.product_family = r.product_family
   AND c.instance_type = r.instance_type
       )
  WITH DATA
       ;

CREATE UNIQUE INDEX aws_compute_summary_service
    ON reporting_aws_compute_summary_by_service (usage_start, product_code, product_family, instance_type, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_storage_summary AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), product_family) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), product_family, source_uuid
)
;

CREATE UNIQUE INDEX aws_storage_summary
ON reporting_aws_storage_summary (usage_start, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), usage_account_id, account_alias_id, product_family) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        usage_account_id,
        account_alias_id,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), usage_account_id, account_alias_id, product_family, source_uuid
)
;

CREATE UNIQUE INDEX aws_storage_summary_account
ON reporting_aws_storage_summary_by_account (usage_start, usage_account_id, account_alias_id, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_region AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), region, availability_zone, product_family) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        region,
        availability_zone,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), region, availability_zone, product_family, source_uuid
)
;

CREATE UNIQUE INDEX aws_storage_summary_region
ON reporting_aws_storage_summary_by_region (usage_start, region, availability_zone, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), product_code, product_family) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        product_code,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), product_code, product_family, source_uuid
)
;

CREATE UNIQUE INDEX aws_storage_summary_service
ON reporting_aws_storage_summary_by_service (usage_start, product_code, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_database_summary AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), product_code) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), product_code, source_uuid
)
;

CREATE UNIQUE INDEX aws_database_summary
ON reporting_aws_database_summary (usage_start, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_aws_network_summary AS(
    SELECT row_number() OVER(ORDER BY date(usage_start), product_code) as id,
        date(usage_start) as usage_start,
        date(usage_start) as usage_end,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_awscostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY date(usage_start), product_code, source_uuid
)
;

CREATE UNIQUE INDEX aws_network_summary
ON reporting_aws_network_summary (usage_start, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, source_uuid
)
;

CREATE UNIQUE INDEX azure_cost_summary
ON reporting_azure_cost_summary (usage_start, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        subscription_guid,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, subscription_guid, source_uuid
)
;

CREATE UNIQUE INDEX azure_cost_summary_account
ON reporting_azure_cost_summary_by_account (usage_start, subscription_guid, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_location AS(
    SELECT row_number() OVER(ORDER BY usage_start, resource_location) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        resource_location,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, resource_location, source_uuid
)
;

CREATE UNIQUE INDEX azure_cost_summary_location
ON reporting_azure_cost_summary_by_location (usage_start, resource_location, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        service_name,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, service_name, source_uuid
)
;

CREATE UNIQUE INDEX azure_cost_summary_service
ON reporting_azure_cost_summary_by_service (usage_start, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_compute_summary AS(
SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.instance_type) AS id,
       c.usage_start,
       c.usage_start as usage_end,
       c.instance_type,
       r.instance_ids,
       CARDINALITY(r.instance_ids) AS instance_count,
       c.usage_quantity,
       c.unit_of_measure,
       c.pretax_cost,
       c.markup_cost,
       c.currency,
       c.source_uuid
  FROM (
        -- this group by gets the counts
         SELECT usage_start,
                instance_type,
                SUM(usage_quantity) AS usage_quantity,
                MAX(unit_of_measure) AS unit_of_measure,
                SUM(pretax_cost) AS pretax_cost,
                SUM(markup_cost) AS markup_cost,
                MAX(currency) AS currency,
                source_uuid
           FROM reporting_azurecostentrylineitem_daily_summary
          WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
            AND instance_type IS NOT NULL
          GROUP
             BY usage_start,
                instance_type,
                source_uuid
       ) AS c
  JOIN (
        -- this group by gets the distinct resources running by day
         SELECT usage_start,
                instance_type,
                ARRAY_AGG(DISTINCT instance_id ORDER BY instance_id) as instance_ids
           FROM (
                  SELECT usage_start,
                         instance_type,
                         UNNEST(instance_ids) AS instance_id
                    FROM reporting_azurecostentrylineitem_daily_summary
                   WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                     AND instance_type IS NOT NULL
                ) AS x
          GROUP
             BY usage_start,
                instance_type
       ) AS r
    ON c.usage_start = r.usage_start
   AND c.instance_type = r.instance_type
       )
  WITH DATA
;

CREATE UNIQUE INDEX azure_compute_summary
    ON reporting_azure_compute_summary (usage_start, instance_type, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_storage_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name LIKE '%Storage%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, service_name, source_uuid
)
;

CREATE UNIQUE INDEX azure_storage_summary
ON reporting_azure_storage_summary (usage_start, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_network_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, service_name, source_uuid
)
;

CREATE UNIQUE INDEX azure_network_summary
ON reporting_azure_network_summary (usage_start, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_azure_database_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_azurecostentrylineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Cosmos DB','Cache for Redis') OR service_name ILIKE '%database%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, service_name, source_uuid
)
;

CREATE UNIQUE INDEX azure_database_summary
ON reporting_azure_database_summary (usage_start, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(supplementary_monthly_cost) as supplementary_monthly_cost,
        sum(infrastructure_monthly_cost) as infrastructure_monthly_cost,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
;

CREATE UNIQUE INDEX ocp_cost_summary
ON reporting_ocp_cost_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_cost_summary_by_node AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, node) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        node,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(supplementary_monthly_cost) as supplementary_monthly_cost,
        sum(infrastructure_monthly_cost) as infrastructure_monthly_cost,
        sum(infrastructure_project_markup_cost) as infrastructure_project_markup_cost,
        sum(infrastructure_project_raw_cost) as infrastructure_project_raw_cost,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, node, source_uuid
)
;

CREATE UNIQUE INDEX ocp_cost_summary_by_node
ON reporting_ocp_cost_summary_by_node (usage_start, cluster_id, cluster_alias, node, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_cost_summary_by_project AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, namespace) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        namespace,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_project_raw_cost) as infrastructure_project_raw_cost,
        sum(infrastructure_project_markup_cost) as infrastructure_project_markup_cost,
        sum(supplementary_monthly_cost) as supplementary_monthly_cost,
        sum(infrastructure_monthly_cost) as infrastructure_monthly_cost,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, namespace, source_uuid
)
;

CREATE UNIQUE INDEX ocp_cost_summary_by_project
ON reporting_ocp_cost_summary_by_project (usage_start, cluster_id, cluster_alias, namespace, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_pod_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        max(data_source) as data_source,
        array_agg(DISTINCT resource_id) as resource_ids,
        count(DISTINCT resource_id) as resource_count,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(pod_usage_cpu_core_hours) as pod_usage_cpu_core_hours,
        sum(pod_request_cpu_core_hours) as pod_request_cpu_core_hours,
        sum(pod_limit_cpu_core_hours) as pod_limit_cpu_core_hours,
        max(cluster_capacity_cpu_core_hours) as cluster_capacity_cpu_core_hours,
        max(total_capacity_cpu_core_hours) as total_capacity_cpu_core_hours,
        sum(pod_usage_memory_gigabyte_hours) as pod_usage_memory_gigabyte_hours,
        sum(pod_request_memory_gigabyte_hours) as pod_request_memory_gigabyte_hours,
        sum(pod_limit_memory_gigabyte_hours) as pod_limit_memory_gigabyte_hours,
        max(total_capacity_memory_gigabyte_hours) as total_capacity_memory_gigabyte_hours,
        max(cluster_capacity_memory_gigabyte_hours) as cluster_capacity_memory_gigabyte_hours,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date AND data_source = 'Pod'
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
;

CREATE UNIQUE INDEX ocp_pod_summary
ON reporting_ocp_pod_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_pod_summary_by_project AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, namespace) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        namespace,
        max(data_source) as data_source,
        array_agg(DISTINCT resource_id) as resource_ids,
        count(DISTINCT resource_id) as resource_count,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(pod_usage_cpu_core_hours) as pod_usage_cpu_core_hours,
        sum(pod_request_cpu_core_hours) as pod_request_cpu_core_hours,
        sum(pod_limit_cpu_core_hours) as pod_limit_cpu_core_hours,
        max(cluster_capacity_cpu_core_hours) as cluster_capacity_cpu_core_hours,
        max(total_capacity_cpu_core_hours) as total_capacity_cpu_core_hours,
        sum(pod_usage_memory_gigabyte_hours) as pod_usage_memory_gigabyte_hours,
        sum(pod_request_memory_gigabyte_hours) as pod_request_memory_gigabyte_hours,
        sum(pod_limit_memory_gigabyte_hours) as pod_limit_memory_gigabyte_hours,
        max(total_capacity_memory_gigabyte_hours) as total_capacity_memory_gigabyte_hours,
        max(cluster_capacity_memory_gigabyte_hours) as cluster_capacity_memory_gigabyte_hours,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date AND data_source = 'Pod'
    GROUP BY usage_start, cluster_id, cluster_alias, namespace, source_uuid
)
;

CREATE UNIQUE INDEX ocp_pod_summary_by_project
ON reporting_ocp_pod_summary_by_project (usage_start, cluster_id, cluster_alias, namespace, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_volume_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        max(data_source) as data_source,
        array_agg(DISTINCT resource_id) as resource_ids,
        count(DISTINCT resource_id) as resource_count,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(persistentvolumeclaim_usage_gigabyte_months) as persistentvolumeclaim_usage_gigabyte_months,
        sum(volume_request_storage_gigabyte_months) as volume_request_storage_gigabyte_months,
        sum(persistentvolumeclaim_capacity_gigabyte_months) as persistentvolumeclaim_capacity_gigabyte_months,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date AND data_source = 'Storage'
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
;

CREATE UNIQUE INDEX ocp_volume_summary
ON reporting_ocp_volume_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocp_volume_summary_by_project AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, namespace) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        namespace,
        max(data_source) as data_source,
        array_agg(DISTINCT resource_id) as resource_ids,
        count(DISTINCT resource_id) as resource_count,
        json_build_object('cpu', sum((supplementary_usage_cost->>'cpu')::decimal),
                        'memory', sum((supplementary_usage_cost->>'memory')::decimal),
                        'storage', sum((supplementary_usage_cost->>'storage')::decimal)) as supplementary_usage_cost,
        json_build_object('cpu', sum((infrastructure_usage_cost->>'cpu')::decimal),
                        'memory', sum((infrastructure_usage_cost->>'memory')::decimal),
                        'storage', sum((infrastructure_usage_cost->>'storage')::decimal)) as infrastructure_usage_cost,
        sum(infrastructure_raw_cost) as infrastructure_raw_cost,
        sum(infrastructure_markup_cost) as infrastructure_markup_cost,
        sum(persistentvolumeclaim_usage_gigabyte_months) as persistentvolumeclaim_usage_gigabyte_months,
        sum(volume_request_storage_gigabyte_months) as volume_request_storage_gigabyte_months,
        sum(persistentvolumeclaim_capacity_gigabyte_months) as persistentvolumeclaim_capacity_gigabyte_months,
        source_uuid
    FROM reporting_ocpusagelineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date AND data_source = 'Storage'
    GROUP BY usage_start, cluster_id, cluster_alias, namespace, source_uuid
)
;

CREATE UNIQUE INDEX ocp_volume_summary_by_project
ON reporting_ocp_volume_summary_by_project (usage_start, cluster_id, cluster_alias, namespace, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary
ON reporting_ocpaws_cost_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        usage_account_id,
        account_alias_id,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_account
ON reporting_ocpaws_cost_summary_by_account (usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code, product_family) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        product_family,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code, product_family, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_service
ON reporting_ocpaws_cost_summary_by_service (usage_start, cluster_id, cluster_alias, product_code, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_region AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, region, availability_zone) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        region,
        availability_zone,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, region, availability_zone, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_region
ON reporting_ocpaws_cost_summary_by_region (usage_start, cluster_id, cluster_alias, region, availability_zone, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_compute_summary AS(
    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, cluster_alias, instance_type, resource_id) AS id,
        usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        instance_type,
        resource_id,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND instance_type IS NOT NULL
    GROUP BY usage_start, cluster_id, cluster_alias, instance_type, resource_id, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_compute_summary
    ON reporting_ocpaws_compute_summary (usage_start, cluster_id, cluster_alias, instance_type, resource_id, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_storage_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_family) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_family, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_storage_summary
ON reporting_ocpaws_storage_summary (usage_start, cluster_id, cluster_alias, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_network_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_network_summary
ON reporting_ocpaws_network_summary (usage_start, cluster_id, cluster_alias, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_database_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_database_summary
ON reporting_ocpaws_database_summary (usage_start, cluster_id, cluster_alias, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary
ON reporting_ocpazure_cost_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, subscription_guid) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        subscription_guid,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, subscription_guid, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_account
ON reporting_ocpazure_cost_summary_by_account (usage_start, cluster_id, cluster_alias, subscription_guid, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_location AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, resource_location) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        resource_location,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, resource_location, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_location
ON reporting_ocpazure_cost_summary_by_location (usage_start, cluster_id, cluster_alias, resource_location, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_service
ON reporting_ocpazure_cost_summary_by_service (usage_start, cluster_id, cluster_alias, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_compute_summary AS(
    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, cluster_alias, instance_type, resource_id) AS id,
        usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        instance_type,
        resource_id,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND instance_type IS NOT NULL
    GROUP BY usage_start, cluster_id, cluster_alias, instance_type, resource_id, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpazure_compute_summary
    ON reporting_ocpazure_compute_summary (usage_start, cluster_id, cluster_alias, instance_type, resource_id, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_storage_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name LIKE '%Storage%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_storage_summary
ON reporting_ocpazure_storage_summary (usage_start, cluster_id, cluster_alias, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_network_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_network_summary
ON reporting_ocpazure_network_summary (usage_start, cluster_id, cluster_alias, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_database_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Cosmos DB','Cache for Redis') OR service_name ILIKE '%database%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name, source_uuid
)
;

CREATE UNIQUE INDEX ocpazure_database_summary
ON reporting_ocpazure_database_summary (usage_start, cluster_id, cluster_alias, service_name, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpallcostlineitem_daily_summary AS (
    SELECT row_number() OVER () as id,
        lids.*
    FROM (
        SELECT 'AWS' as source_type,
            cluster_id,
            cluster_alias,
            namespace,
            node::text as node,
            resource_id,
            usage_start,
            usage_end,
            usage_account_id,
            account_alias_id,
            product_code,
            product_family,
            instance_type,
            region,
            availability_zone,
            tags,
            usage_amount,
            unit,
            unblended_cost,
            markup_cost,
            currency_code,
            shared_projects,
            project_costs,
            source_uuid
        FROM reporting_ocpawscostlineitem_daily_summary
        WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date

        UNION

        SELECT 'Azure' as source_type,
            cluster_id,
            cluster_alias,
            namespace,
            node::text as node,
            resource_id,
            usage_start,
            usage_end,
            subscription_guid as usage_account_id,
            NULL::int as account_alias_id,
            service_name as product_code,
            NULL as product_family,
            instance_type,
            resource_location as region,
            NULL as availability_zone,
            tags,
            usage_quantity as usage_amount,
            unit_of_measure as unit,
            pretax_cost as unblended_cost,
            markup_cost,
            currency as currency_code,
            shared_projects,
            project_costs,
            source_uuid
        FROM reporting_ocpazurecostlineitem_daily_summary
        WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    ) AS lids
)
;

CREATE INDEX ocpallcstdlysumm_node on reporting_ocpallcostlineitem_daily_summary (node text_pattern_ops);
CREATE INDEX ocpallcstdlysumm_node_like on reporting_ocpallcostlineitem_daily_summary USING GIN (node gin_trgm_ops);
CREATE INDEX ocpallcstdlysumm_nsp on reporting_ocpallcostlineitem_daily_summary USING GIN (namespace);
CREATE INDEX ocpall_product_code_ilike ON reporting_ocpallcostlineitem_daily_summary USING GIN (upper(product_code) gin_trgm_ops);

CREATE MATERIALIZED VIEW reporting_ocpallcostlineitem_project_daily_summary AS (
    SELECT row_number() OVER () as id,
        lids.*
    FROM (
        SELECT 'AWS' as source_type,
            cluster_id,
            cluster_alias,
            data_source,
            namespace::text as namespace,
            node::text as node,
            pod_labels,
            resource_id,
            usage_start,
            usage_end,
            usage_account_id,
            account_alias_id,
            product_code,
            product_family,
            instance_type,
            region,
            availability_zone,
            usage_amount,
            unit,
            unblended_cost,
            project_markup_cost,
            pod_cost,
            currency_code,
            source_uuid
        FROM reporting_ocpawscostlineitem_project_daily_summary
        WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date

        UNION

        SELECT 'Azure' as source_type,
            cluster_id,
            cluster_alias,
            data_source,
            namespace::text as namespace,
            node::text as node,
            pod_labels,
            resource_id,
            usage_start,
            usage_end,
            subscription_guid as usage_account_id,
            NULL::int as account_alias_id,
            service_name as product_code,
            NULL as product_family,
            instance_type,
            resource_location as region,
            NULL as availability_zone,
            usage_quantity as usage_amount,
            unit_of_measure as unit,
            pretax_cost as unblended_cost,
            project_markup_cost,
            pod_cost,
            currency as currency_code,
            source_uuid
        FROM reporting_ocpazurecostlineitem_project_daily_summary
        WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    ) AS lids
)
;

CREATE INDEX ocpallcstprjdlysumm_node on reporting_ocpallcostlineitem_project_daily_summary (node text_pattern_ops);
CREATE INDEX ocpallcstprjdlysumm_nsp on reporting_ocpallcostlineitem_project_daily_summary (namespace text_pattern_ops);
CREATE INDEX ocpallcstprjdlysumm_node_like on reporting_ocpallcostlineitem_project_daily_summary USING GIN (node gin_trgm_ops);
CREATE INDEX ocpallcstprjdlysumm_nsp_like on reporting_ocpallcostlineitem_project_daily_summary USING GIN (namespace gin_trgm_ops);
CREATE INDEX ocpall_product_family_ilike ON reporting_ocpallcostlineitem_daily_summary USING GIN (upper(product_family) gin_trgm_ops);

CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_cost_summary
ON reporting_ocpall_cost_summary (usage_start, cluster_id, cluster_alias, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        usage_account_id,
        account_alias_id,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_cost_summary_account
ON reporting_ocpall_cost_summary_by_account (usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code, product_family) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        product_family,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code, product_family, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_cost_summary_service
ON reporting_ocpall_cost_summary_by_service (usage_start, cluster_id, cluster_alias, product_code, product_family, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_region AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, region, availability_zone) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        region,
        availability_zone,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, region, availability_zone, source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_cost_summary_region
ON reporting_ocpall_cost_summary_by_region (usage_start, cluster_id, cluster_alias, region, availability_zone, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_compute_summary AS (
    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, cluster_alias, product_code) AS id,
        lids.usage_start,
        lids.usage_start as usage_end,
        lids.cluster_id,
        lids.cluster_alias,
        lids.product_code,
        lids.instance_type,
        lids.resource_id,
        sum(lids.usage_amount) as usage_amount,
        max(lids.unit) as unit,
        sum(lids.unblended_cost) as unblended_cost,
        sum(lids.markup_cost) as markup_cost,
        max(lids.currency_code) as currency_code,
        lids.source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary lids
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND instance_type IS NOT NULL
    GROUP BY lids.usage_start,
        lids.cluster_id,
        lids.cluster_alias,
        lids.product_code,
        lids.instance_type,
        lids.resource_id,
        lids.source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_compute_summary
ON reporting_ocpall_compute_summary (usage_start, cluster_id, cluster_alias, product_code, instance_type, resource_id, source_uuid);

CREATE MATERIALIZED VIEW reporting_ocpall_database_summary AS (
    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, cluster_alias, product_code) AS id,
        lids.usage_start,
        lids.usage_start as usage_end,
        lids.cluster_id,
        lids.cluster_alias,
        lids.product_code,
        sum(lids.usage_amount) as usage_amount,
        max(lids.unit) as unit,
        sum(lids.unblended_cost) as unblended_cost,
        sum(lids.markup_cost) as markup_cost,
        max(lids.currency_code) as currency_code,
        lids.source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary lids
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND (
            product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB','Cosmos DB','Cache for Redis')
                OR product_code LIKE '%Database%'
        )
    GROUP BY lids.usage_start,
        lids.cluster_id,
        lids.cluster_alias,
        lids.product_code,
        lids.source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_database_summary
ON reporting_ocpall_database_summary (usage_start, cluster_id, cluster_alias, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_network_summary AS (
    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, cluster_alias, product_code) AS id,
        lids.cluster_id,
        lids.cluster_alias,
        lids.usage_start,
        lids.usage_start as usage_end,
        lids.product_code,
        sum(lids.usage_amount) as usage_amount,
        max(lids.unit) as unit,
        sum(lids.unblended_cost) as unblended_cost,
        sum(lids.markup_cost) as markup_cost,
        max(lids.currency_code) as currency_code,
        lids.source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary lids
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway','Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
    GROUP BY lids.usage_start,
        lids.cluster_id,
        lids.cluster_alias,
        lids.product_code,
        lids.source_uuid
)
WITH DATA
;

CREATE UNIQUE INDEX ocpall_network_summary
ON reporting_ocpall_network_summary (usage_start, cluster_id, cluster_alias, product_code, source_uuid)
;

CREATE MATERIALIZED VIEW reporting_ocpall_storage_summary AS (
    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, cluster_alias, product_family, product_code) AS id,
        cluster_id,
        cluster_alias,
        usage_start,
        usage_start as usage_end,
        product_family,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        source_uuid
    FROM reporting_ocpallcostlineitem_daily_summary
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND (product_family LIKE '%Storage%' OR product_code LIKE '%Storage%')
    GROUP BY usage_start,
        cluster_id,
        cluster_alias,
        product_family,
        product_code,
        source_uuid
)
WITH DATA
;

CREATE INDEX ocpall_storage_summary
ON reporting_ocpall_storage_summary (usage_start, cluster_id, cluster_alias, product_family, product_code, source_uuid)
;
"""
        ),
    ]
