# Generated by Django 3.1.3 on 2020-12-07 19:08
import uuid

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [("reporting", "0153_ocpnamespacelabellineitem")]

    operations = [
        migrations.CreateModel(
            name="GCPCostEntryLineItemDaily",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("line_item_type", models.CharField(max_length=256, null=True)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField(null=True)),
                ("tags", models.JSONField(null=True)),
                ("usage_type", models.CharField(max_length=50, null=True)),
                ("region", models.CharField(blank=True, max_length=256, null=True)),
                ("cost", models.DecimalField(blank=True, decimal_places=9, max_digits=24, null=True)),
                ("currency", models.CharField(blank=True, max_length=256, null=True)),
                ("conversion_rate", models.CharField(blank=True, max_length=256, null=True)),
                ("usage_amount", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("usage_unit", models.CharField(blank=True, max_length=256, null=True)),
                ("usage_in_pricing_units", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("usage_pricing_unit", models.CharField(blank=True, max_length=256, null=True)),
                ("invoice_month", models.CharField(blank=True, max_length=256, null=True)),
                ("tax_type", models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={"db_table": "reporting_gcpcostentrylineitem_daily"},
        ),
        migrations.CreateModel(
            name="GCPCostEntryLineItemDailySummary",
            fields=[
                ("uuid", models.UUIDField(primary_key=True, serialize=False)),
                ("account_id", models.CharField(max_length=20)),
                ("project_id", models.CharField(max_length=256)),
                ("project_name", models.CharField(max_length=256)),
                ("service_id", models.CharField(max_length=256, null=True)),
                ("service_alias", models.CharField(blank=True, max_length=256, null=True)),
                ("sku_id", models.CharField(max_length=256, null=True)),
                ("sku_alias", models.CharField(max_length=256, null=True)),
                ("usage_start", models.DateField()),
                ("usage_end", models.DateField(null=True)),
                ("region", models.CharField(max_length=50, null=True)),
                ("instance_type", models.CharField(max_length=50, null=True)),
                ("unit", models.CharField(max_length=63, null=True)),
                ("line_item_type", models.CharField(max_length=256, null=True)),
                ("usage_amount", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("currency", models.CharField(max_length=10)),
                ("unblended_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("markup_cost", models.DecimalField(decimal_places=9, max_digits=24, null=True)),
                ("tags", models.JSONField(null=True)),
                ("source_uuid", models.UUIDField(null=True)),
            ],
            options={"db_table": "reporting_gcpcostentrylineitem_daily_summary"},
        ),
        migrations.CreateModel(
            name="GCPEnabledTagKeys",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("key", models.CharField(max_length=253, unique=True)),
            ],
            options={"db_table": "reporting_gcpenabledtagkeys"},
        ),
        migrations.CreateModel(
            name="GCPTagsSummary",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("key", models.TextField()),
                ("values", django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ("account_id", models.TextField(null=True)),
            ],
            options={"db_table": "reporting_gcptags_summary"},
        ),
        migrations.CreateModel(
            name="GCPTagsValues",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("key", models.TextField()),
                ("value", models.TextField()),
                ("account_ids", django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
            ],
            options={"db_table": "reporting_gcptags_values"},
        ),
        migrations.AddIndex(
            model_name="gcptagsvalues", index=models.Index(fields=["key"], name="gcp_tags_value_key_idx")
        ),
        migrations.AlterUniqueTogether(name="gcptagsvalues", unique_together={("key", "value")}),
        migrations.AddField(
            model_name="gcptagssummary",
            name="cost_entry_bill",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="reporting.gcpcostentrybill"),
        ),
        migrations.AddField(
            model_name="gcpcostentrylineitemdailysummary",
            name="cost_entry_bill",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="reporting.gcpcostentrybill"),
        ),
        migrations.AddField(
            model_name="gcpcostentrylineitemdaily",
            name="cost_entry_bill",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="reporting.gcpcostentrybill"),
        ),
        migrations.AddField(
            model_name="gcpcostentrylineitemdaily",
            name="cost_entry_product",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="reporting.gcpcostentryproductservice"
            ),
        ),
        migrations.AddField(
            model_name="gcpcostentrylineitemdaily",
            name="project",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="reporting.gcpproject"),
        ),
        migrations.AlterUniqueTogether(
            name="gcptagssummary", unique_together={("key", "cost_entry_bill", "account_id")}
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["usage_start"], name="gcp_summary_usage_start_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["instance_type"], name="gcp_summary_instance_type_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=django.contrib.postgres.indexes.GinIndex(fields=["tags"], name="gcp_tags_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["project_id"], name="gcp_summary_project_id_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["project_name"], name="gcp_summary_project_name_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["service_id"], name="gcp_summary_service_id_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdailysummary",
            index=models.Index(fields=["service_alias"], name="gcp_summary_service_alias_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdaily",
            index=models.Index(fields=["usage_start"], name="gcp_usage_start_idx"),
        ),
        migrations.AddIndex(
            model_name="gcpcostentrylineitemdaily",
            index=django.contrib.postgres.indexes.GinIndex(fields=["tags"], name="gcp_cost_entry"),
        ),
    ]
