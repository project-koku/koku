# Generated by Django 3.1.13 on 2021-08-05 21:47
import logging

from django.db import migrations


LOG = logging.getLogger(__name__)

CACHE = {}


def check_partitioned(apps, schema_editor):
    conn = schema_editor.connection
    sql = """
SELECT c.relname::text,
       (c.relkind = 'p')::boolean as "is_partitioned"
  FROM pg_class c
  JOIN pg_namespace n
    ON n.oid = c.relnamespace
 WHERE n.nspname = current_schema
   AND c.relname = any(array['reporting_ocpallcostlineitem_daily_summary',
                             'reporting_ocpallcostlineitem_project_daily_summary',
                             'p_reporting_ocpallcostlineitem_daily_summary',
                             'p_reporting_ocpallcostlineitem_project_daily_summary']::text[]) ;
"""
    with conn.cursor() as cur:
        cur.execute(sql)
        for rec in cur.fetchall():
            CACHE[rec[0]] = rec[1]


def execute_sql_stmts(conn, sql_stmts):
    for stmts in sql_stmts:
        LOG.info(stmts.pop(0))
        for stmt in stmts:
            with conn.cursor() as cur:
                cur.execute(stmt)


def create_ocpall_summary_table(apps, schema_editor):
    table_name = "reporting_ocpallcostlineitem_daily_summary"
    p_table_name = f"p_{table_name}"
    if CACHE.get(p_table_name):
        LOG.warning(f"TABLE {p_table_name} IS PARTITIONED -- SKIP CREATE")
        return

    sql_stmts = [
        [
            f"Create partitioned table {p_table_name}",
            f"""
CREATE TABLE {p_table_name}
(
    LIKE {table_name}
    INCLUDING DEFAULTS
    INCLUDING GENERATED
    INCLUDING IDENTITY
    INCLUDING STATISTICS
)
PARTITION BY RANGE (usage_start);
""",
        ],
        [
            f"Alter column data types and constraints on {p_table_name}",
            f"""
ALTER TABLE {p_table_name}
      ALTER COLUMN id SET DATA TYPE uuid USING uuid_generate_v4(),
      ALTER COLUMN id SET NOT NULL,
      ALTER COLUMN id SET DEFAULT uuid_generate_v4(),
      ALTER COLUMN namespace SET NOT NULL,
      ALTER COLUMN usage_start SET NOT NULL,
      ALTER COLUMN usage_end SET NOT NULL,
      ALTER COLUMN usage_account_id SET DATA TYPE text,
      ALTER COLUMN usage_account_id SET NOT NULL,
      ALTER COLUMN product_code SET DATA TYPE text,
      ALTER COLUMN product_code SET NOT NULL,
      ALTER COLUMN product_family SET DATA TYPE text,
      ALTER COLUMN instance_type SET DATA TYPE text,
      ALTER COLUMN region SET DATA TYPE text,
      ALTER COLUMN availability_zone SET DATA TYPE text,
      ALTER COLUMN shared_projects SET NOT NULL;
""",
        ],
        [
            f"Create constraints on table {p_table_name}",
            f"""
ALTER TABLE {p_table_name}
  ADD CONSTRAINT "ocpallcostlineitem_ds_pk" PRIMARY KEY (usage_start, id),
  ADD CONSTRAINT "ocpallcostlineitem_ds_account_alias_id_fk"
      FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias (id)
                  DEFERRABLE INITIALLY DEFERRED;
""",
        ],
        [
            f"Create indexes on tables {p_table_name}",
            f"""CREATE INDEX ocpall_ds_prod_code_ilike ON {p_table_name} USING gin (upper(product_code::text) gin_trgm_ops);""",
            f"""CREATE INDEX ocpall_ds_prod_fam_ilike ON {p_table_name} USING gin (upper(product_family::text) gin_trgm_ops);""",
            f"""CREATE INDEX ocpall_ds_node ON {p_table_name} (node text_pattern_ops);""",
            f"""CREATE INDEX ocpall_ds_node_like ON {p_table_name} USING gin (node gin_trgm_ops);""",
            f"""CREATE INDEX ocpall_ds_namespace ON {p_table_name} USING gin (namespace);""",
        ],
    ]

    execute_sql_stmts(schema_editor.connection, sql_stmts)


def drop_ocpall_summary_table(apps, schema_editor):
    table_name = "reporting_ocpallcostlineitem_daily_summary"
    p_table_name = f"p_{table_name}"
    sql_stmts = [[f"Dropping table {p_table_name}", f"DROP TABLE IF EXISTS {p_table_name} ;"]]

    execute_sql_stmts(schema_editor.connection, sql_stmts)


def create_ocpall_project_summary_table(apps, schema_editor):
    table_name = "reporting_ocpallcostlineitem_project_daily_summary"
    p_table_name = f"p_{table_name}"
    if CACHE.get(p_table_name):
        LOG.warning(f"TABLE {p_table_name} IS PARTITIONED -- SKIP CREATE")
        return

    sql_stmts = [
        [
            f"Create partitioned table {p_table_name}",
            f"""
CREATE TABLE {p_table_name}
(
    LIKE {table_name}
    INCLUDING DEFAULTS
    INCLUDING GENERATED
    INCLUDING IDENTITY
    INCLUDING STATISTICS
)
PARTITION BY RANGE (usage_start);
""",
        ],
        [
            f"Alter column data types and constraints on {p_table_name}",
            f"""
ALTER TABLE {p_table_name}
      ALTER COLUMN id SET DATA TYPE uuid USING uuid_generate_v4(),
      ALTER COLUMN id SET NOT NULL,
      ALTER COLUMN id SET DEFAULT uuid_generate_v4(),
      ALTER COLUMN namespace SET NOT NULL,
      ALTER COLUMN usage_start SET NOT NULL,
      ALTER COLUMN usage_end SET NOT NULL,
      ALTER COLUMN usage_account_id SET DATA TYPE text,
      ALTER COLUMN usage_account_id SET NOT NULL,
      ALTER COLUMN product_code SET DATA TYPE text,
      ALTER COLUMN product_code SET NOT NULL,
      ALTER COLUMN product_family SET DATA TYPE text,
      ALTER COLUMN instance_type SET DATA TYPE text,
      ALTER COLUMN region SET DATA TYPE text,
      ALTER COLUMN availability_zone SET DATA TYPE text;
""",
        ],
        [
            f"Create constraints on table {p_table_name}",
            f"""
ALTER TABLE {p_table_name}
  ADD CONSTRAINT "ocpallcostlineitem_pds_pk" PRIMARY KEY (usage_start, id),
  ADD CONSTRAINT "ocpallcostlineitem_pds_account_alias_id_fk"
      FOREIGN KEY (account_alias_id) REFERENCES reporting_awsaccountalias (id)
                  DEFERRABLE INITIALLY DEFERRED;
""",
        ],
        [
            f"Create indexes on tables {p_table_name}",
            f"""CREATE INDEX ocpall_pds_node ON {p_table_name} (node text_pattern_ops);""",
            f"""CREATE INDEX ocpall_pds_node_like ON {p_table_name} USING gin (node gin_trgm_ops);""",
            f"""CREATE INDEX ocpall_pds_namespace ON {p_table_name} (namespace text_pattern_ops);""",
            f"""CREATE INDEX ocpall_pds_namespace_like ON {p_table_name} USING gin (namespace gin_trgm_ops);""",
        ],
    ]

    execute_sql_stmts(schema_editor.connection, sql_stmts)


def drop_ocpall_project_summary_table(apps, schema_editor):
    table_name = "reporting_ocpallcostlineitem_project_daily_summary"
    p_table_name = f"p_{table_name}"
    sql_stmts = [[f"Dropping table {p_table_name}", f"DROP TABLE IF EXISTS {p_table_name} ;"]]

    execute_sql_stmts(schema_editor.connection, sql_stmts)


class Migration(migrations.Migration):

    dependencies = [("reporting", "0189_auto_20210803_2056")]

    operations = [
        migrations.RunPython(code=check_partitioned, reverse_code=lambda ap, se: None),
        migrations.RunPython(code=create_ocpall_summary_table, reverse_code=drop_ocpall_summary_table),
        migrations.RunPython(code=create_ocpall_project_summary_table, reverse_code=drop_ocpall_project_summary_table),
    ]
