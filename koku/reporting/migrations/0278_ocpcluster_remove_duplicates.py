# Generated by Django 3.2.18 on 2023-05-11 18:29
from django.db import migrations
from django.db import models


def remove_duplicates(apps, schema_editor):
    OCPCluster = apps.get_model("reporting", "OCPCluster")
    OCPProject = apps.get_model("reporting", "OCPProject")
    OCPNode = apps.get_model("reporting", "OCPNode")
    OCPPVC = apps.get_model("reporting", "OCPPVC")

    # Find duplicate clusters based on cluster_id, cluster_alias, and provider
    duplicate_clusters = (
        OCPCluster.objects.values("cluster_id", "cluster_alias", "provider_id")
        .annotate(count=models.Count("*"))
        .filter(count__gt=1)
    )

    # Process duplicate clusters
    for cluster in duplicate_clusters:
        # Get all clusters matching the criteria
        clusters = OCPCluster.objects.filter(
            cluster_id=cluster["cluster_id"],
            cluster_alias=cluster["cluster_alias"],
            provider_id=cluster["provider_id"],
        ).order_by("uuid")

        # Keep the first cluster and delete others
        first_cluster_uuid = clusters.first().uuid
        clusters_to_remove = clusters.exclude(uuid=first_cluster_uuid)

        # Delete foreign key references to the duplicate clusters
        OCPProject.objects.filter(cluster__in=clusters_to_remove).delete()
        OCPNode.objects.filter(cluster__in=clusters_to_remove).delete()
        OCPPVC.objects.filter(cluster__in=clusters_to_remove).delete()

        # Delete duplicate clusters
        clusters_to_remove.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0058_exchangeratedictionary"),
        ("reporting", "0277_store_aws_amoritized_cost"),
    ]

    operations = [
        migrations.RunPython(remove_duplicates),
    ]
