# Generated by Django 2.2.12 on 2020-06-17 14:52
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [("reporting", "0116_ocpall_unique_index")]

    operations = [
        migrations.RunSQL(
            """
                DROP INDEX IF EXISTS aws_cost_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary;

                DROP INDEX IF EXISTS aws_cost_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_account;

                DROP INDEX IF EXISTS aws_cost_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_service;

                DROP INDEX IF EXISTS aws_cost_summary_region;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_cost_summary_by_region;

                DROP INDEX IF EXISTS aws_compute_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary;

                DROP INDEX IF EXISTS aws_compute_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_account;

                DROP INDEX IF EXISTS aws_compute_summary_region;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_region;

                DROP INDEX IF EXISTS aws_compute_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_compute_summary_by_service;

                DROP INDEX IF EXISTS aws_storage_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary;

                DROP INDEX IF EXISTS aws_storage_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_account;

                DROP INDEX IF EXISTS aws_storage_summary_region;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_region;

                DROP INDEX IF EXISTS aws_storage_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_storage_summary_by_service;

                DROP INDEX IF EXISTS aws_database_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_database_summary;

                DROP INDEX IF EXISTS aws_network_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_aws_network_summary;

                DROP INDEX IF EXISTS azure_cost_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary;

                DROP INDEX IF EXISTS azure_cost_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_account;

                DROP INDEX IF EXISTS azure_cost_summary_location;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_location;

                DROP INDEX IF EXISTS azure_cost_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_cost_summary_by_service;

                DROP INDEX IF EXISTS azure_compute_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_compute_summary;

                DROP INDEX IF EXISTS azure_storage_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_storage_summary;

                DROP INDEX IF EXISTS azure_network_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_network_summary;

                DROP INDEX IF EXISTS azure_database_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_azure_database_summary;

                DROP INDEX IF EXISTS ocpaws_cost_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary;

                DROP INDEX IF EXISTS ocpaws_cost_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_account;

                DROP INDEX IF EXISTS ocpaws_cost_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_service;

                DROP INDEX IF EXISTS ocpaws_cost_summary_region;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_region;

                DROP INDEX IF EXISTS ocpaws_compute_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_compute_summary;

                DROP INDEX IF EXISTS ocpaws_storage_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_storage_summary;

                DROP INDEX IF EXISTS ocpaws_network_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_network_summary;

                DROP INDEX IF EXISTS ocpaws_database_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_database_summary;

                DROP INDEX IF EXISTS ocpazure_cost_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary;

                DROP INDEX IF EXISTS ocpazure_cost_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_account;

                DROP INDEX IF EXISTS ocpazure_cost_summary_location;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_location;

                DROP INDEX IF EXISTS ocpazure_cost_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_service;

                DROP INDEX IF EXISTS ocpazure_compute_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_compute_summary;

                DROP INDEX IF EXISTS ocpazure_storage_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_storage_summary;

                DROP INDEX IF EXISTS ocpazure_network_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_network_summary;

                DROP INDEX IF EXISTS ocpazure_database_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_database_summary;

                DROP INDEX IF EXISTS ocpall_storage_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_storage_summary;

                DROP INDEX IF EXISTS ocpall_network_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_network_summary;

                DROP INDEX IF EXISTS ocpall_database_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_database_summary;

                DROP INDEX IF EXISTS ocpall_compute_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_compute_summary;

                DROP INDEX IF EXISTS ocpall_cost_summary_region;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_region;

                DROP INDEX IF EXISTS ocpall_cost_summary_service;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_service;

                DROP INDEX IF EXISTS ocpall_cost_summary_account;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary_by_account;

                DROP INDEX IF EXISTS ocpall_cost_summary;
                DROP MATERIALIZED VIEW IF EXISTS reporting_ocpall_cost_summary;

                CREATE MATERIALIZED VIEW reporting_aws_cost_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, source_uuid) as id,
                        usage_start,
                        usage_start as usage_end,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY date(usage_start), source_uuid
                )
                ;

                CREATE UNIQUE INDEX aws_cost_summary
                ON reporting_aws_cost_summary (usage_start, source_uuid)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id
                )
                ;

                CREATE UNIQUE INDEX aws_cost_summary_account
                ON reporting_aws_cost_summary_by_account (usage_start, usage_account_id)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, product_code, product_family) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        product_code,
                        product_family,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, product_code, product_family
                )
                ;

                CREATE UNIQUE INDEX aws_cost_summary_service
                ON reporting_aws_cost_summary_by_service (usage_start, usage_account_id, product_code, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_cost_summary_by_region AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, region, availability_zone) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        region,
                        availability_zone,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, region, availability_zone
                )
                ;

                CREATE UNIQUE INDEX aws_cost_summary_region
                ON reporting_aws_cost_summary_by_region (usage_start, usage_account_id, region, availability_zone)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_compute_summary AS (
                    SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.instance_type, c.source_uuid) AS id,
                        c.usage_start,
                        c.usage_start as usage_end,
                        c.instance_type,
                        r.resource_ids,
                        CARDINALITY(r.resource_ids) AS resource_count,
                        c.usage_amount,
                        c.unit,
                        c.unblended_cost,
                        c.markup_cost,
                        c.currency_code,
                        c.source_uuid
                    FROM (
                            -- this group by gets the counts
                            SELECT usage_start,
                                    instance_type,
                                    SUM(usage_amount) AS usage_amount,
                                    MAX(unit) AS unit,
                                    SUM(unblended_cost) AS unblended_cost,
                                    SUM(markup_cost) AS markup_cost,
                                    MAX(currency_code) AS currency_code,
                                    source_uuid
                            FROM reporting_awscostentrylineitem_daily_summary
                            WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                AND instance_type IS NOT NULL
                            GROUP BY usage_start,
                                instance_type,
                                source_uuid
                        ) AS c
                    JOIN (
                            -- this group by gets the distinct resources running by day
                            SELECT usage_start,
                                    instance_type,
                                    ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) as resource_ids
                            FROM (
                                    SELECT usage_start,
                                            instance_type,
                                            UNNEST(resource_ids) AS resource_id
                                        FROM reporting_awscostentrylineitem_daily_summary
                                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                        AND instance_type IS NOT NULL
                                    ) AS x
                            GROUP
                                BY usage_start,
                                    instance_type
                        ) AS r
                        ON c.usage_start = r.usage_start
                    AND c.instance_type = r.instance_type
                )
                WITH DATA
                    ;

                CREATE UNIQUE INDEX aws_compute_summary
                    ON reporting_aws_compute_summary (usage_start, source_uuid, instance_type)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_account AS (
                    SELECT ROW_NUMBER() OVER (ORDER BY c.usage_start, c.usage_account_id, c.instance_type) as id,
                        c.usage_start,
                        c.usage_start AS usage_end,
                        c.usage_account_id,
                        c.account_alias_id,
                        c.organizational_unit_id,
                        c.instance_type,
                        r.resource_ids,
                        CARDINALITY(r.resource_ids) AS resource_count,
                        c.usage_amount,
                        c.unit,
                        c.unblended_cost,
                        c.markup_cost,
                        c.currency_code,
                        c.source_uuid
                    FROM (
                            -- this group by gets the counts
                            SELECT usage_start,
                                    usage_account_id,
                                    MAX(account_alias_id) as account_alias_id,
                                    MAX(organizational_unit_id) as organizational_unit_id,
                                    instance_type,
                                    SUM(usage_amount) AS usage_amount,
                                    MAX(unit) AS unit,
                                    SUM(unblended_cost) AS unblended_cost,
                                    SUM(markup_cost) AS markup_cost,
                                    MAX(currency_code) AS currency_code,
                                    max(source_uuid::text)::uuid as source_uuid
                            FROM reporting_awscostentrylineitem_daily_summary
                            WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                AND instance_type IS NOT NULL
                            GROUP BY usage_start,
                                usage_account_id,
                                instance_type
                        ) AS c
                    JOIN (
                            -- this group by gets the distinct resources running by day
                            SELECT usage_start,
                                    usage_account_id,
                                    max(account_alias_id) as account_alias_id,
                                    instance_type,
                                    array_agg(distinct resource_id order by resource_id) as resource_ids
                            FROM (
                                    SELECT usage_start,
                                            usage_account_id,
                                            account_alias_id,
                                            instance_type,
                                            UNNEST(resource_ids) as resource_id
                                        FROM reporting_awscostentrylineitem_daily_summary
                                    WHERE usage_start >= date_trunc('month', NOW() - '1 month'::interval)::date
                                        AND instance_type IS NOT NULL
                                    ) AS x
                            GROUP
                                BY usage_start,
                                usage_account_id,
                                instance_type
                        ) AS r
                        ON c.usage_start = r.usage_start
                    AND c.instance_type = r.instance_type
                    AND c.usage_account_id = r.usage_account_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX aws_compute_summary_account
                    ON reporting_aws_compute_summary_by_account (usage_start, usage_account_id, account_alias_id, instance_type)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_region AS (
                    SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.usage_account_id, c.region, c.availability_zone, c.instance_type) AS id,
                        c.usage_start,
                        c.usage_start AS usage_end,
                        c.usage_account_id,
                        c.account_alias_id,
                        c.organizational_unit_id,
                        c.region,
                        c.availability_zone,
                        c.instance_type,
                        r.resource_ids,
                        CARDINALITY(r.resource_ids) AS resource_count,
                        c.usage_amount,
                        c.unit,
                        c.unblended_cost,
                        c.markup_cost,
                        c.currency_code,
                        c.source_uuid
                    FROM (
                            -- this group by gets the counts
                            SELECT usage_start,
                                    usage_account_id,
                                    MAX(account_alias_id) as account_alias_id,
                                    MAX(organizational_unit_id) as organizational_unit_id,
                                    region,
                                    availability_zone,
                                    instance_type,
                                    SUM(usage_amount) AS usage_amount,
                                    MAX(unit) AS unit,
                                    SUM(unblended_cost) AS unblended_cost,
                                    SUM(markup_cost) AS markup_cost,
                                    MAX(currency_code) AS currency_code,
                                    MAX(source_uuid::text)::uuid as source_uuid
                            FROM reporting_awscostentrylineitem_daily_summary
                            WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                AND instance_type IS NOT NULL
                            GROUP
                                BY usage_start,
                                    usage_account_id,
                                    region,
                                    availability_zone,
                                    instance_type
                        ) AS c
                    JOIN (
                            -- this group by gets the distinct resources running by day
                            SELECT usage_start,
                                    usage_account_id,
                                    max(account_alias_id) as account_alias_id,
                                    region,
                                    availability_zone,
                                    instance_type,
                                    ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) AS resource_ids
                            from (
                                    SELECT usage_start,
                                            usage_account_id,
                                            account_alias_id,
                                            region,
                                            availability_zone,
                                            instance_type,
                                            UNNEST(resource_ids) AS resource_id
                                        FROM reporting_awscostentrylineitem_daily_summary
                                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                        AND instance_type IS NOT NULL
                                    ) AS x
                            GROUP
                                BY usage_start,
                                    usage_account_id,
                                    region,
                                    availability_zone,
                                    instance_type
                        ) AS r
                        ON c.usage_start = r.usage_start
                    AND c.region = r.region
                    AND c.availability_zone = r.availability_zone
                    AND c.instance_type = r.instance_type
                    AND c.usage_account_id = r.usage_account_id
                    )
                WITH DATA
                    ;

                CREATE UNIQUE INDEX aws_compute_summary_region
                    ON reporting_aws_compute_summary_by_region (usage_start, usage_account_id, region, availability_zone, instance_type)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_compute_summary_by_service AS (
                    SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.usage_account_id, c.product_code, c.product_family, c.instance_type) AS id,
                        c.usage_start,
                        c.usage_start as usage_end,
                        c.usage_account_id,
                        c.account_alias_id,
                        c.organizational_unit_id,
                        c.product_code,
                        c.product_family,
                        c.instance_type,
                        r.resource_ids,
                        CARDINALITY(r.resource_ids) AS resource_count,
                        c.usage_amount,
                        c.unit,
                        c.unblended_cost,
                        c.markup_cost,
                        c.currency_code,
                        c.source_uuid
                    FROM (
                            -- this group by gets the counts
                            SELECT usage_start,
                                    usage_account_id,
                                    MAX(account_alias_id) as account_alias_id,
                                    MAX(organizational_unit_id) as organizational_unit_id,
                                    product_code,
                                    product_family,
                                    instance_type,
                                    SUM(usage_amount) AS usage_amount,
                                    MAX(unit) AS unit,
                                    SUM(unblended_cost) AS unblended_cost,
                                    SUM(markup_cost) AS markup_cost,
                                    MAX(currency_code) AS currency_code,
                                    MAX(source_uuid::text)::uuid as source_uuid
                            FROM reporting_awscostentrylineitem_daily_summary
                            WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                AND instance_type IS NOT NULL
                            GROUP
                                BY usage_start,
                                    usage_account_id,
                                    product_code,
                                    product_family,
                                    instance_type
                        ) AS c
                    JOIN (
                            -- this group by gets the distinct resources running by day
                            SELECT usage_start,
                                    usage_account_id,
                                    max(account_alias_id) as account_alias_id,
                                    product_code,
                                    product_family,
                                    instance_type,
                                    ARRAY_AGG(DISTINCT resource_id ORDER BY resource_id) as resource_ids
                            from (
                                    SELECT usage_start,
                                            usage_account_id,
                                            account_alias_id,
                                            product_code,
                                            product_family,
                                            instance_type,
                                            UNNEST(resource_ids) AS resource_id
                                        FROM reporting_awscostentrylineitem_daily_summary
                                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                        AND instance_type IS NOT NULL
                                    ) AS x
                            GROUP
                                BY usage_start,
                                    usage_account_id,
                                    product_code,
                                    product_family,
                                    instance_type
                        ) AS r
                        ON c.usage_start = r.usage_start
                    AND c.product_code = r.product_code
                    AND c.product_family = r.product_family
                    AND c.instance_type = r.instance_type
                    AND c.usage_account_id = r.usage_account_id
                    )
                WITH DATA
                ;

                CREATE UNIQUE INDEX aws_compute_summary_service
                    ON reporting_aws_compute_summary_by_service (usage_start, usage_account_id, product_code, product_family, instance_type)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_storage_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, source_uuid, product_family) as id,
                        usage_start,
                        usage_start as usage_end,
                        product_family,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_family LIKE '%Storage%'
                        AND unit = 'GB-Mo'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, source_uuid, product_family
                )
                ;

                CREATE UNIQUE INDEX aws_storage_summary
                ON reporting_aws_storage_summary (usage_start, source_uuid, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, product_family) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        product_family,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_family LIKE '%Storage%'
                        AND unit = 'GB-Mo'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, product_family
                )
                ;

                CREATE UNIQUE INDEX aws_storage_summary_account
                ON reporting_aws_storage_summary_by_account (usage_start, usage_account_id, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_database_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, product_code) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        product_code,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, product_code
                )
                ;

                CREATE UNIQUE INDEX aws_database_summary
                ON reporting_aws_database_summary (usage_start, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_region AS(
                    SELECT row_number() OVER(ORDER BY date(usage_start), usage_account_id, region, availability_zone, product_family) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        region,
                        availability_zone,
                        product_family,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_family LIKE '%Storage%'
                        AND unit = 'GB-Mo'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, region, availability_zone, product_family
                )
                ;

                CREATE UNIQUE INDEX aws_storage_summary_region
                ON reporting_aws_storage_summary_by_region (usage_start, usage_account_id, region, availability_zone, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_storage_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, product_code, product_family) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        product_code,
                        product_family,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_family LIKE '%Storage%'
                        AND unit = 'GB-Mo'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, product_code, product_family
                )
                ;

                CREATE UNIQUE INDEX aws_storage_summary_service
                ON reporting_aws_storage_summary_by_service (usage_start, usage_account_id, product_code, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_aws_network_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, usage_account_id, product_code) as id,
                        usage_start,
                        usage_start as usage_end,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        max(organizational_unit_id) as organizational_unit_id,
                        product_code,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_awscostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, usage_account_id, product_code
                )
                ;

                CREATE UNIQUE INDEX aws_network_summary
                ON reporting_aws_network_summary (usage_start, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_cost_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, source_uuid) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, source_uuid
                )
                ;

                CREATE UNIQUE INDEX azure_cost_summary
                ON reporting_azure_cost_summary (usage_start, source_uuid)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid
                )
                ;

                CREATE UNIQUE INDEX azure_cost_summary_account
                ON reporting_azure_cost_summary_by_account (usage_start, subscription_guid)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_location AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid, resource_location) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        resource_location,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid, resource_location
                )
                ;

                CREATE UNIQUE INDEX azure_cost_summary_location
                ON reporting_azure_cost_summary_by_location (usage_start, subscription_guid, resource_location)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_cost_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        service_name,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX azure_cost_summary_service
                ON reporting_azure_cost_summary_by_service (usage_start, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_compute_summary AS(
                SELECT ROW_NUMBER() OVER(ORDER BY c.usage_start, c.subscription_guid, c.instance_type) AS id,
                    c.usage_start,
                    c.usage_start as usage_end,
                    c.subscription_guid,
                    c.instance_type,
                    r.instance_ids,
                    CARDINALITY(r.instance_ids) AS instance_count,
                    c.usage_quantity,
                    c.unit_of_measure,
                    c.pretax_cost,
                    c.markup_cost,
                    c.currency,
                    c.source_uuid
                FROM (
                        -- this group by gets the counts
                        SELECT usage_start,
                                subscription_guid,
                                instance_type,
                                SUM(usage_quantity) AS usage_quantity,
                                MAX(unit_of_measure) AS unit_of_measure,
                                SUM(pretax_cost) AS pretax_cost,
                                SUM(markup_cost) AS markup_cost,
                                MAX(currency) AS currency,
                                max(source_uuid::text)::uuid as source_uuid
                        FROM reporting_azurecostentrylineitem_daily_summary
                        WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                            AND instance_type IS NOT NULL
                        GROUP
                            BY usage_start,
                                subscription_guid,
                                instance_type
                    ) AS c
                JOIN (
                        -- this group by gets the distinct resources running by day
                        SELECT usage_start,
                                subscription_guid,
                                instance_type,
                                ARRAY_AGG(DISTINCT instance_id ORDER BY instance_id) as instance_ids
                        FROM (
                                SELECT usage_start,
                                        subscription_guid,
                                        instance_type,
                                        UNNEST(instance_ids) AS instance_id
                                    FROM reporting_azurecostentrylineitem_daily_summary
                                WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                                    AND instance_type IS NOT NULL
                                ) AS x
                        GROUP
                            BY usage_start,
                                subscription_guid,
                                instance_type
                    ) AS r
                    ON c.usage_start = r.usage_start
                AND c.subscription_guid = r.subscription_guid
                AND c.instance_type = r.instance_type
                    )
                WITH DATA
                ;

                CREATE UNIQUE INDEX azure_compute_summary
                    ON reporting_azure_compute_summary (usage_start, subscription_guid, instance_type)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_storage_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name LIKE '%Storage%'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX azure_storage_summary
                ON reporting_azure_storage_summary (usage_start, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_network_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name IN ('Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX azure_network_summary
                ON reporting_azure_network_summary (usage_start, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_azure_database_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_azurecostentrylineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name IN ('Cosmos DB','Cache for Redis') OR service_name ILIKE '%database%'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX azure_database_summary
                ON reporting_azure_database_summary (usage_start, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_cost_summary
                ON reporting_ocpaws_cost_summary (usage_start, cluster_id)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_cost_summary_account
                ON reporting_ocpaws_cost_summary_by_account (usage_start, cluster_id, usage_account_id)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, product_code, product_family) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        product_code,
                        product_family,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, product_code, product_family
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_cost_summary_service
                ON reporting_ocpaws_cost_summary_by_service (usage_start, cluster_id, usage_account_id, product_code, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_region AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, region, availability_zone) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        region,
                        availability_zone,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, region, availability_zone
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_cost_summary_region
                ON reporting_ocpaws_cost_summary_by_region (usage_start, cluster_id, usage_account_id, region, availability_zone)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_compute_summary AS(
                    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, usage_account_id, instance_type, resource_id) AS id,
                        usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        instance_type,
                        resource_id,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND instance_type IS NOT NULL
                    GROUP BY usage_start, cluster_id, usage_account_id, instance_type, resource_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_compute_summary
                    ON reporting_ocpaws_compute_summary (usage_start, cluster_id, usage_account_id, instance_type, resource_id)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_storage_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, product_family) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        product_family,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_family LIKE '%Storage%'
                        AND unit = 'GB-Mo'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, product_family
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_storage_summary
                ON reporting_ocpaws_storage_summary (usage_start, cluster_id, usage_account_id, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_network_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, product_code) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        product_code,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, product_code
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_network_summary
                ON reporting_ocpaws_network_summary (usage_start, cluster_id, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpaws_database_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, product_code) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        product_code,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpawscostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, product_code
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpaws_database_summary
                ON reporting_ocpaws_database_summary (usage_start, cluster_id, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, source_uuid) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, source_uuid
                )
                ;

                CREATE UNIQUE INDEX ocpazure_cost_summary
                ON reporting_ocpazure_cost_summary (usage_start, cluster_id, cluster_alias, source_uuid)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid
                )
                ;

                CREATE UNIQUE INDEX ocpazure_cost_summary_account
                ON reporting_ocpazure_cost_summary_by_account (usage_start, cluster_id, subscription_guid)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_location AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid, resource_location) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        resource_location,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid, resource_location
                )
                ;

                CREATE UNIQUE INDEX ocpazure_cost_summary_location
                ON reporting_ocpazure_cost_summary_by_location (usage_start, cluster_id, subscription_guid, resource_location)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        service_name,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX ocpazure_cost_summary_service
                ON reporting_ocpazure_cost_summary_by_service (usage_start, cluster_id, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_compute_summary AS(
                    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, subscription_guid, instance_type, resource_id) AS id,
                        usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        instance_type,
                        resource_id,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND instance_type IS NOT NULL
                    GROUP BY usage_start, cluster_id, subscription_guid, instance_type, resource_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpazure_compute_summary
                    ON reporting_ocpazure_compute_summary (usage_start, cluster_id, subscription_guid, instance_type, resource_id)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_storage_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name LIKE '%Storage%'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX ocpazure_storage_summary
                ON reporting_ocpazure_storage_summary (usage_start, cluster_id, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_network_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name IN ('Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX ocpazure_network_summary
                ON reporting_ocpazure_network_summary (usage_start, cluster_id, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpazure_database_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, subscription_guid, service_name) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        subscription_guid,
                        service_name,
                        sum(usage_quantity) as usage_quantity,
                        max(unit_of_measure) as unit_of_measure,
                        sum(pretax_cost) as pretax_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency) as currency,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpazurecostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE service_name IN ('Cosmos DB','Cache for Redis') OR service_name ILIKE '%database%'
                        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, subscription_guid, service_name
                )
                ;

                CREATE UNIQUE INDEX ocpazure_database_summary
                ON reporting_ocpazure_database_summary (usage_start, cluster_id, subscription_guid, service_name)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, source_uuid) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, cluster_alias, source_uuid
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_cost_summary
                ON reporting_ocpall_cost_summary (usage_start, cluster_id, source_uuid)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_account AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_cost_summary_account
                ON reporting_ocpall_cost_summary_by_account (usage_start, cluster_id, usage_account_id)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_service AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, product_code, product_family) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        product_code,
                        product_family,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, product_code, product_family
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_cost_summary_service
                ON reporting_ocpall_cost_summary_by_service (usage_start, cluster_id, usage_account_id, product_code, product_family)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_cost_summary_by_region AS(
                    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, usage_account_id, region, availability_zone) as id,
                        usage_start as usage_start,
                        usage_start as usage_end,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        region,
                        availability_zone,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary
                    -- Get data for this month or last month
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                    GROUP BY usage_start, cluster_id, usage_account_id, region, availability_zone
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_cost_summary_region
                ON reporting_ocpall_cost_summary_by_region (usage_start, cluster_id, usage_account_id, region, availability_zone)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_compute_summary AS (
                    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, usage_account_id, product_code) AS id,
                        lids.usage_start,
                        lids.usage_start as usage_end,
                        lids.cluster_id,
                        max(lids.cluster_alias) as cluster_alias,
                        lids.usage_account_id,
                        max(lids.account_alias_id) as account_alias_id,
                        lids.product_code,
                        lids.instance_type,
                        lids.resource_id,
                        sum(lids.usage_amount) as usage_amount,
                        max(lids.unit) as unit,
                        sum(lids.unblended_cost) as unblended_cost,
                        sum(lids.markup_cost) as markup_cost,
                        max(lids.currency_code) as currency_code,
                        max(lids.source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary lids
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND instance_type IS NOT NULL
                    GROUP BY lids.usage_start,
                        lids.cluster_id,
                        lids.usage_account_id,
                        lids.product_code,
                        lids.instance_type,
                        lids.resource_id
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_compute_summary
                ON reporting_ocpall_compute_summary (usage_start, cluster_id, usage_account_id, product_code, instance_type, resource_id);

                CREATE MATERIALIZED VIEW reporting_ocpall_database_summary AS (
                    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, usage_account_id, product_code) AS id,
                        lids.usage_start,
                        lids.usage_start as usage_end,
                        lids.cluster_id,
                        max(lids.cluster_alias) as cluster_alias,
                        lids.usage_account_id,
                        max(lids.account_alias_id) as account_alias_id,
                        lids.product_code,
                        sum(lids.usage_amount) as usage_amount,
                        max(lids.unit) as unit,
                        sum(lids.unblended_cost) as unblended_cost,
                        sum(lids.markup_cost) as markup_cost,
                        max(lids.currency_code) as currency_code,
                        max(lids.source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary lids
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND (
                            product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB','Cosmos DB','Cache for Redis')
                                OR product_code LIKE '%Database%'
                        )
                    GROUP BY lids.usage_start,
                        lids.cluster_id,
                        lids.usage_account_id,
                        lids.product_code
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_database_summary
                ON reporting_ocpall_database_summary (usage_start, cluster_id, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_network_summary AS (
                    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, usage_account_id, product_code) AS id,
                        lids.cluster_id,
                        max(lids.cluster_alias) as cluster_alias,
                        lids.usage_account_id,
                        max(lids.account_alias_id) as account_alias_id,
                        lids.usage_start,
                        lids.usage_start as usage_end,
                        lids.product_code,
                        sum(lids.usage_amount) as usage_amount,
                        max(lids.unit) as unit,
                        sum(lids.unblended_cost) as unblended_cost,
                        sum(lids.markup_cost) as markup_cost,
                        max(lids.currency_code) as currency_code,
                        max(lids.source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary lids
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway','Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
                    GROUP BY lids.usage_start,
                        lids.cluster_id,
                        lids.usage_account_id,
                        lids.product_code
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_network_summary
                ON reporting_ocpall_network_summary (usage_start, cluster_id, usage_account_id, product_code)
                ;

                CREATE MATERIALIZED VIEW reporting_ocpall_storage_summary AS (
                    SELECT row_number() OVER (ORDER BY usage_start, cluster_id, usage_account_id, product_family, product_code) AS id,
                        cluster_id,
                        max(cluster_alias) as cluster_alias,
                        usage_account_id,
                        max(account_alias_id) as account_alias_id,
                        usage_start,
                        usage_start as usage_end,
                        product_family,
                        product_code,
                        sum(usage_amount) as usage_amount,
                        max(unit) as unit,
                        sum(unblended_cost) as unblended_cost,
                        sum(markup_cost) as markup_cost,
                        max(currency_code) as currency_code,
                        max(source_uuid::text)::uuid as source_uuid
                    FROM reporting_ocpallcostlineitem_daily_summary
                    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
                        AND (product_family LIKE '%Storage%' OR product_code LIKE '%Storage%')
                    GROUP BY usage_start,
                        cluster_id,
                        usage_account_id,
                        product_family,
                        product_code
                )
                WITH DATA
                ;

                CREATE UNIQUE INDEX ocpall_storage_summary
                ON reporting_ocpall_storage_summary (usage_start, cluster_id, usage_account_id, product_family, product_code)
                ;
                """
        )
    ]
