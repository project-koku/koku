# Generated by Django 3.2.13 on 2022-05-19 21:22
import logging

from django.db import migrations


LOG = logging.getLogger(__name__)


TARGET_TABLES = [
    "reporting_awscostentrylineitem",
    "reporting_awscostentrylineitem_daily",
    "reporting_azurecostentrylineitem_daily",
    "reporting_gcpcostentrylineitem",
    "reporting_gcpcostentrylineitem_daily",
    "reporting_ocpusagelineitem",
    "reporting_ocpusagelineitem_daily",
    "reporting_ocpstoragelineitem",
    "reporting_ocpstoragelineitem_daily",
]


def truncate_tables(apps, schema_editor):
    conn = schema_editor.connection
    sql = """
select current_schema, tt.table_name
  from unnest(%s::text[]) tt(table_name)
 where to_regclass(format('%%I.%%I', current_schema::text, tt.table_name)) is not null
;
"""
    _target_tables = []
    LOG.info(f"Getting existing target tables in current schema...")
    with conn.cursor() as cur:
        cur.execute(sql, (TARGET_TABLES,))
        if cur.rowcount > 0:
            _target_tables.extend(f'"{rec[0]}"."{rec[1]}"' for rec in cur)

    sql = """
TRUNCATE TABLE {} ;
"""
    if _target_tables:
        _tot_targets = len(_target_tables)
        for _curr_target, table in enumerate(_target_tables):
            with conn.cursor() as cur:
                LOG.info(f"Truncating table {table}... ({_curr_target + 1}/{_tot_targets} for schema)")
                cur.execute(sql.format(table))
                LOG.info("Truncate complete")


class Migration(migrations.Migration):

    dependencies = [("reporting", "0255_ocp_label_indices")]

    operations = [migrations.RunPython(code=truncate_tables, reverse_code=migrations.RunPython.noop)]
