from django.db.models import Field
from django.db.models import Lookup


# Custom Django Lookups
@Field.register_lookup
class AllowNullIcontains(Lookup):
    """
    AllowNullIcontains accepts a list which will create a `NOT LIKE` with an
    `AND` between each element in the list.

    COST-3199: Django adds `IS NOT NULL` to queries generated by `.exclude`.
    This extra SQL removes `no-{option}` from query results. Django does this
    to handle tri-value logic where `NULL` equates to `UNKNOWN`. `NOT UNKNOWN`
    is still `UNKNOWN`.
    """

    lookup_name = "noticontainslist"
    prepare_rhs = False

    def as_sql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        formatted_sql = []
        params = tuple()
        for rhs_param in rhs_params:
            for exclude in rhs_param:
                format_exclude = f"%{exclude}%"
                params = params + lhs_params + (format_exclude,)
                the_format = f"(UPPER({lhs}::text) NOT LIKE UPPER({rhs}))"
                formatted_sql.append(the_format)
        final_format = " AND ".join(formatted_sql), params
        return final_format
