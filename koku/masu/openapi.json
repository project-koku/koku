{
  "openapi": "3.0.0",
  "info": {
    "description": "The Admin 'Masu' API for Cost Management.  You can find out more about     Cost Management at [https://github.com/project-koku/](https://github.com/project-koku/).",
    "version": "1.0.0",
    "title": "Cost Management Admin",
    "license": {
      "name": "AGPL-3.0",
      "url": "https://opensource.org/licenses/AGPL-3.0"
    }
  },
  "tags": [
    {
      "name": "Download",
      "description": "Operations about report downloads"
    },
    {
      "name": "Enabled Tags",
      "description": "Create or delete OCP enabled tags"
    },
    {
      "name": "Expired Data",
      "description": "Operations about removing expired data"
    },
    {
      "name": "Report Data",
      "description": "Operations about summarizing report data"
    },
    {
      "name": "HCS Report Data",
      "description": "Operations about HCS report data"
    },
    {
      "name": "HCS Report Finalization",
      "description": "Operations about HCS report finalization"
    },
    {
      "name": "Update Cost Model Cost",
      "description": "Operations about updating cost model costs"
    },
    {
      "name": "OCP on Cloud Report Data",
      "description": "Summarize an OpenShift on Cloud source's summary data"
    },
    {
      "name": "Status",
      "description": "Operations about status"
    },
    {
      "name": "Sources",
      "description": "Information on all cost management sources"
    },
    {
      "name": "Notification",
      "description": "Start task to check and send cost management notifications"
    },
    {
      "name": "Crawl Account Hierarchy",
      "description": "Start the crawler for account hierarchy."
    },
    {
      "name": "Running Celery Tasks",
      "description": "Returns a list of running celery task ids."
    },
    {
      "name": "Celery Queue Lengths",
      "description": "Returns a list of celery queues with their lengths."
    },
    {
      "name": "Clear Celery Queue",
      "description": "Returns number of tasks cleared from the queue"
    },
    {
      "name": "Update exchange rates",
      "description": "Updates and returns the list of exchange rates"
    },
    {
      "name": "Trino",
      "description": "An endpoint to interact with Trino."
    }
  ],
  "paths": {
    "/download/": {
      "get": {
        "summary": "Download reports",
        "operationId": "getDownload",
        "description": "Return download file async task ID.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The celery task ID of the download task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Download"
        ]
      },
      "parameters": [
        {
          "name": "provider_uuid",
          "in": "query",
          "description": "The provider UUID",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        },
        {
          "name": "bill_date",
          "in": "query",
          "description": "The month's data to download",
          "required": false,
          "schema": {
            "type": "string",
            "format": "date",
            "example": "2019-01-01"
          }
        },
        {
          "name": "summarize_reports",
          "in": "query",
          "description": "Whether to trigger summarization after the download and process.",
          "required": false,
          "schema": {
            "type": "boolean",
            "example": true
          }
        }
      ]
    },
    "/enabled_tags/": {
      "get": {
        "summary": "List OCP Enabled Tags",
        "operationId": "getEnabledTag",
        "description": "Return tag keys.",
        "parameters": [
          {
            "name": "schema",
            "in": "query",
            "description": "The database schema",
            "required": true,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tag keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnabledTagGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Enabled Tags"
        ]
      },
      "post": {
        "summary": "Create or delete OCP Enabled Tags",
        "operationId": "postEnabledTag",
        "description": "Return tag keys.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnabledTagPostData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of tag keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnabledTagPostResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Enabled Tags"
        ]
      },
      "parameters": []
    },
    "/expired_data/": {
      "get": {
        "operationId": "getExpiredData",
        "description": "Return simulated expired data.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Simulate the deletion expired data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Expired Data"
        ]
      },
      "delete": {
        "operationId": "deleteExpiredData",
        "description": "Return expired data.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Delete expired data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredDataDeleteResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Expired Data"
        ]
      },
      "parameters": []
    },
    "/hcs_report_data/": {
      "get": {
        "operationId": "getHCSReportData",
        "description": "Collect HCS report data.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "provider_type",
            "in": "query",
            "description": "The provider type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "AWS"
            }
          },
          {
            "name": "schema_name",
            "in": "query",
            "description": "The database schema_name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The date to begin summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date to end summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-12-31"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HCS report task has been queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HCSDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "HCS Report Data"
        ]
      }
    },
    "/hcs_report_finalization/": {
      "get": {
        "operationId": "getHCSReportFinalization",
        "description": "Finalize HCS report data.",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "The month you want to finalize",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 12,
              "example": 4
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The year you want to finalize, you must provide month when using this option",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 2000,
              "maximum": 2050,
              "example": 2021
            }
          },
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID (not supported with provider_type or schema_name)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "provider_type",
            "in": "query",
            "description": "The provider type (not supported with provider_uuid)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "AWS"
            }
          },
          {
            "name": "schema_name",
            "in": "query",
            "description": "The database schema (not supported with provider_uuid)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          },
          {
            "name": "tracing_id",
            "in": "query",
            "description": "The tracing UUID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HCS Finalization task has been queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HCSFinalizationDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "HCS Report Finalization"
        ]
      }
    },
    "/report_data/": {
      "get": {
        "operationId": "getReportData",
        "description": "Update report summary tables in the database.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "provider_type",
            "in": "query",
            "description": "The provider type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "AWS"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "The database schema",
            "required": false,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The date to begin summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date to end summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-12-31"
            }
          },
          {
            "name": "ocp_on_cloud",
            "in": "query",
            "description": "Whether to summarize OCP on Cloud as well.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invoice_month",
            "in": "query",
            "description": "Whether to summarize OCP on Cloud as well.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "201912"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data summary task has been queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Report Data"
        ]
      },
      "delete": {
        "operationId": "deleteReportData",
        "description": "Delete report summary tables in the database.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider database ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": 1
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "The provider type",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AWS"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "The database schema",
            "required": true,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          },
          {
            "name": "simulate",
            "in": "query",
            "description": "Whether to actually delete",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date to end summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-12-31"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Data deletion task has been queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Report Data"
        ]
      },
      "parameters": []
    },
    "/sources/": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "List the sources",
        "operationId": "listSources",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the source to filter for.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of source to filter for.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "The account id to filter on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema_name",
            "in": "query",
            "description": "The account id to filter on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infrastructure_provider_id",
            "in": "query",
            "description": "The source UUID of the underlying cloud account an OpenShift cluster is operating on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cluster_id",
            "in": "query",
            "description": "The cluster ID of an OpenShift cluster.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Whether to filter for active sources.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "paused",
            "in": "query",
            "description": "Whether to filter for paused sources.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pending_delete",
            "in": "query",
            "description": "Whether to filter for pending_delete sources.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pending_update",
            "in": "query",
            "description": "Whether to filter for pending_update sources.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "out_of_order_delete",
            "in": "query",
            "description": "Whether to filter for out_of_order_delete sources.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of source objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcePagination"
                }
              }
            }
          }
        }
      }
    },
    "/sources/{source_id}/": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Get a source",
        "operationId": "getSource",
        "parameters": [{
          "name": "source_id",
          "in": "path",
          "description": "ID of source to get",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }],
        "responses": {
          "200": {
            "description": "A Source object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/status/": {
      "get": {
        "operationId": "status_list",
        "description": "Packages response for class-based view.",
        "parameters": [
          {
            "name": "celery",
            "in": "query",
            "description": "Whether to return celery queue/task data",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Status"
        ]
      },
      "parameters": []
    },
    "/update_cost_model_costs/": {
      "get": {
        "operationId": "update_cost_model_costs_list",
        "description": "Update report summary tables in the database.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "The database schema",
            "required": false,
            "schema": {
              "type": "string",
              "example": "acct12345"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update derived cost",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCostModelCostGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Update Cost Model Cost"
        ]
      },
      "parameters": []
    },
    "/update_openshift_on_cloud/": {
      "get": {
        "operationId": "getOCPOnCloudReportData",
        "description": "Update report summary tables in the database.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The OpenShift provider UUID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "The database schema",
            "required": false,
            "schema": {
              "type": "string",
              "example": "org1234567"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The date to begin summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date to end summarizing",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-12-31"
            }
          },
          {
            "name": "queue",
            "in": "query",
            "description": "The celery queue to use",
            "required": false,
            "schema": {
              "type": "string",
              "example": "summary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data summary task has been queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "OCP on Cloud Report Data"
        ]
      },
      "parameters": []
    },
    "/notification/": {
      "get": {
        "summary": "check and send notifications",
        "operationId": "getNotifications",
        "description": "Return notification file async task ID.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The celery task ID of the notification task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationGetResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ]
      }
    },
    "/crawl_account_hierarchy/": {
      "get": {
        "summary": "Start the crawler for account hierarchy.",
        "operationId": "crawlAccountHierarchy",
        "description": "Returns crawl account hierarchy async task ID.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The celery task ID of the crawl account hierarchy task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlAccountHierarchy"
                }
              }
            }
          }
        },
        "tags": [
          "Crawl Account Hierarchy"
        ]
      },
      "post": {
        "summary": "Create aws org unit tree from json",
        "operationId": "crawlAccountHierarchyPost",
        "description": "Return tree json.",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrawlAccountHierarchyPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return tree json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlAccountHierarchyPostResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Crawl Account Hierarchy"
        ]
      },
      "parameters": []
    },
    "/running_celery_tasks/": {
      "get": {
        "summary": "Returns a list of running celery tasks.",
        "operationId": "runningCeleryTasks",
        "description": "Returns a list of running celery tasks.",
        "responses": {
          "200": {
            "description": "Returns a list of running celery tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runningCeleryTasks"
                }
              }
            }
          }
        },
        "tags": [
          "Running Celery Tasks"
        ]
      }
    },
    "/celery_queue_lengths/": {
      "get": {
        "summary": "Returns a list of celery queues with the number of tasks in them.",
        "operationId": "celeryQueueLength",
        "description": "Returns a dictionary of queues with queue length.",
        "responses": {
          "200": {
            "description": "Returns a dictionary of queues with their associated lengths.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/celeryQueueLength"
                }
              }
            }
          }
        },
        "tags": [
          "Celery Queue Lengths"
        ]
      }
    },
    "/clear_celery_queues/":{
      "get":{
        "summary": "Returns the number of tasks cleared the celery queues.",
        "operationId":"clearCeleryQueues",
        "description": "Returns the number of tasks cleared the celery queues.",
        "parameters":[
          {
            "name": "clear_all",
            "description":"whether to clear all celery queues.",
            "in":"query",
            "schema":{
              "type":"boolean"
            }
          }
        ],
        "responses":{
          "200":{
            "description": "Returns the number of tasks cleared the celery queue.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/clearCeleryQueues"
                }
              }
            }
          }
        },
        "tags":[
          "Clearing Celery Tasks"
        ]
      }
    },
    "/db-performance/db-version/": {
        "get": {
          "summary": "Returns a table showing the PostgreSQL database software version.",
          "operationId": "dbPerformanceDbVersion",
          "description": "Returns a HTML document showing the database version.",
          "responses": {
            "200": {
              "description": "Returns a HTML document showing the database version.",
              "content": {
                  "text/html": {}
              }
            }
          },
          "tags": [
            "db-performance",
            "db-version"
          ]
        }
      },
      "/db-performance/db-settings/": {
        "get": {
          "summary": "Returns a table showing the PostgreSQL database software version.",
          "operationId": "dbPerformanceDbSettings",
          "description": "Returns a HTML document showing the database software settings.",
          "responses": {
            "200": {
              "description": "Returns a HTML document showing the database software settings.",
              "content": {
                "text/html": {}
            }
          }
          },
          "tags": [
            "db-performance",
            "db-settings"
          ]
        }
      },
      "/db-performance/stat-statements/": {
        "get": {
          "summary": "Returns a table showing query statement statistics if the pg_stat_statements extension has been installed.",
          "operationId": "dbPerformanceStatStatements",
          "description": "Returns a HTML document showing query statement statistics if the pg_stat_statements extension has been installed.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Limit of the returned result set",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset into the query result set before returning records",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a HTML document showing query statement statistics if the pg_stat_statements extension has been installed.",
              "content": {
                "text/html": {}
            }
          }
          },
          "tags": [
            "db-performance",
            "stat-statements"
          ]
        }
      },
      "/db-performance/stat-activity/": {
        "get": {
          "summary": "Returns a table showing current connection activity.",
          "operationId": "dbPerformanceStatActivity",
          "description": "Returns a HTML document showing current connection activity.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Limit of the returned result set. The default is 500.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset into the query result set before returning records. The default is no offset.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            },
            {
              "name": "pid",
              "in": "query",
              "description": "Narrow results to supplied pid values",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                }
              }
            },
            {
              "name": "state",
              "in": "query",
              "description": "Narrow results to supplied state values. These include: active, idle, idle in transaction",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                    "type": "string"
                }
              }
            },
            {
              "name": "include_self",
              "in": "query",
              "description": "If true, include the pid of the connection running the DB Performance queries",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "records_per_db",
              "in": "query",
              "description": "If there are multiple databases hosted by the engine, then how many records per db to include up to the limit. The default is 100.",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a HTML document showing current connection activity.",
              "content": {
                "text/html": {}
            }
          }
          },
          "tags": [
            "db-performance",
            "stat-activity"
          ]
        }
      },
      "/db-performance/lock-info/": {
        "get": {
          "summary": "Returns a table showing any detected blocking locks.",
          "operationId": "dbPerformanceLockInfo",
          "description": "Returns a HTML document showing any blocking locks and processes that are blocked by them.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Limit of the returned result set",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset into the query result set before returning records",
              "required": false,
              "schema": {
                "type": "integer",
                "format": "int32",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a HTML document showing any blocking locks and processes that are blocked by them.",
              "content": {
                "text/html": {}
            }
          }
          },
          "tags": [
            "db-performance",
            "lock-info"
          ]
        }
      },
      "/db-performance/explain-query/": {
        "get": {
          "summary": "Returns a HTML document interface to submit a query for the database to explain.",
          "operationId": "dbPerformanceExplainQuery",
          "description": "Returns a HTML document interface to submit a query for the database to explain.",
          "responses": {
            "200": {
              "description": "Returns a HTML document interface to submit a query for the database to explain.",
              "content": {
                "text/html": {}
            }
          }
          },
          "tags": [
            "db-performance",
            "explain-query",
            "interface"
          ]
        },
        "post": {
          "summary": "Returns JSON containing each query and explanation submitted.",
          "operationId": "dbPerformanceExplainQueryPost",
          "description": "Returns JSON containing each query and explanation submitted.",
          "parameters": [
            {
              "name": "sql_statement",
              "in": "query",
              "description": "The text of the SQL statement to explain.",
              "required": true,
              "schema": {
                "type": "string",
                "example": "select col from table where filter = 'value';"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbPerformanceExplainQueryPost"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Return Plans.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/dbPerformanceExplainQueryPostResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "db-performance",
            "explain-query",
            "action"
          ]
        }
      },
      "/gcp_invoice_monthly_cost/": {
      "get": {
        "summary": "Returns dictionary with cost mappings for continuity checks",
        "operationId": "gcpInvoiceMonthlyCost",
        "description": "Returns a dictionary with cost mappings for continuity checks",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with cost mappings for continuity checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gcpInvoiceMonthlyCost"
                }
              }
            }
          }
        },
        "tags": [
          "GCP Invoice Monthly Cost"
        ]
      }
    },
    "/bigquery_cost/": {
      "get": {
        "summary": "Returns dictionary with cost mappings for continuity checks",
        "operationId": "BigQueryCost",
        "description": "Returns a dictionary with cost mappings for continuity checks",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "daily",
            "in": "query",
            "description": "boolean flag to return daily breakdown",
            "required": false,
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with cost mappings for continuity checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gcpInvoiceMonthlyCost"
                }
              }
            }
          }
        },
        "tags": [
          "Bigquery Cost"
        ]
      }
    },
    "/update_exchange_rates/": {
      "get": {
        "summary": "Update exchange rates",
        "operationId": "getUpdatedEchangeRates",
        "description": "Update and return list of exchange rates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a dictionary of exchange rates after update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExchangeRates"
                }
              }
            }
          }
        },
        "tags": [
          "Update Exchange Rates"
        ]
      }
    },
    "/manifests/": {
      "get": {
        "tags": [
          "Manifests"
        ],
        "summary": "Returns all manifest information",
        "operationId": "getManifest",
        "parameters": [
          {
            "$ref": "#/components/parameters/ProviderName"
          }
        ],
        "responses": {
          "200": {
            "description": "An object describing manifest information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifests"
                }
              }
            }
          },
          "404": {
            "description": "Manifests not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/manifests/{source_uuid}/": {
      "get": {
        "tags": [
          "Manifests"
        ],
        "summary": "returns manifests for a provider source uuid",
        "operationId": "getManifestbyUUID",
        "parameters": [
          {
            "name": "source_uuid",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "4199b508-39d5-43f0-838a-6d86af0ef6e0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object describing manifest information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifests"
                }
              }
            }
          },
          "404": {
            "description": "Manifests not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/manifests/{source_uuid}/{manifest_id}/": {
      "get": {
        "tags": [
          "Manifests"
        ],
        "summary": "Returns a specific manifest for the provider source uuid",
        "operationId": "getManifestbyUUIDandID",
        "parameters": [
          {
            "name": "source_uuid",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "4199b508-39d5-43f0-838a-6d86af0ef6e0"
            }
          },
          {
            "name": "manifest_id",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object describing manifest information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          },
          "404": {
            "description": "Manifest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/manifests/{source_uuid}/{manifest_id}/files/": {
      "get": {
        "tags": [
          "Manifests"
        ],
        "summary": "Returns file report information for a manifest",
        "operationId": "getManifestfiles",
        "parameters": [
          {
            "name": "source_uuid",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "4199b508-39d5-43f0-838a-6d86af0ef6e0"
            }
          },
          {
            "name": "manifest_id",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object describing manifest report information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatuses"
                }
              }
            }
          },
          "404": {
            "description": "Manifest reports not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/manifests/{source_uuid}/{manifest_id}/files/{id}": {
      "get": {
        "tags": [
          "Manifests"
        ],
        "summary": "Returns a specific file report status for a manifest",
        "operationId": "getManifestfile",
        "parameters": [
          {
            "name": "source_uuid",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "4199b508-39d5-43f0-838a-6d86af0ef6e0"
            }
          },
          {
            "name": "manifest_id",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "provider source uuid",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object describing manifest report information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatus"
                }
              }
            }
          },
          "404": {
            "description": "Manifest report not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trino/query/": {
      "post": {
        "summary": "Returns JSON or CSV with query output.",
        "operationId": "TrinoQuery",
        "description": "Returns JSON or CSV with query output.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrinoQueryPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrinoQueryPostResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "column_one,column_two,column_three"
                }
              }
            }
          }
        },
        "tags": [
          "Trino"
        ]
      }
    },
    "/trino/api/": {
      "get": {
        "summary": "Returns JSON with query output.",
        "operationId": "TrinoUI",
        "description": "Returns JSON with query output.",
        "parameters": [
          {
            "name": "api_service",
            "in": "query",
            "description":"name of the trino ui api to call",
            "required": true,
            "schema":{
              "type":"string",
              "enum":["query", "stats", "cluster"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON with query result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrinoUiGetResponse"
                }
              }
            }
          },
          "400":{
            "description":"Invalid trino-ui api service",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TrinoUiGetErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Trino UI"
        ]
      }
    },
    "/purge_trino_files/": {
      "get": {
        "summary": "Returns dictionary with task ids as keys and paths as values",
        "operationId": "purgeTrinoFiles",
        "description": "Returns a mapping of task ids to paths",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "schema",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "acct10001"
            }
          },
          {
            "name": "bill_date",
            "in": "query",
            "description": "The month's data to download",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          },
          {
            "name": "ignore_manifest",
            "in": "query",
            "description": "will not delete manifests if param is present",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "start of when you want the files purged",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "end of when you want the files purged",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with cost mappings for continuity checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purgeTrinoFiles"
                }
              }
            }
          }
        },
        "tags": [
          "Purge Trino Files"
        ]
      },
      "delete": {
        "summary": "Returns dictionary with task ids as keys and paths as values",
        "operationId": "purgeTrinoFilesDelete",
        "description": "Returns a mapping of task ids to paths",
        "parameters": [
          {
            "name": "provider_uuid",
            "in": "query",
            "description": "The provider UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "schema",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "example": "acct10001"
            }
          },
          {
            "name": "bill_date",
            "in": "query",
            "description": "The month's data to download",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2019-01-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with cost mappings for continuity checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purgeTrinoFiles"
                }
              }
            }
          }
        },
        "tags": [
          "Purge Trino Files"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "ProviderName": {
        "name": "provider_name",
        "in": "query",
        "description": "String to indicate the provider name.",
        "schema": {
          "type": "string",
          "example": "aws_org_tree"
        }
      },
      "QueryOffset": {
        "in": "query",
        "name": "offset",
        "required": false,
        "description": "Parameter for selecting the offset of data.",
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0
        }
      },
      "QueryLimit": {
        "in": "query",
        "name": "limit",
        "required": false,
        "description": "Parameter for selecting the amount of data in a returned.",
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 1000
        }
      }
    },
    "schemas": {
      "DownloadGetResponse": {
        "type": "object",
        "properties": {
          "Download Request Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "EnabledTagGetResponse": {
        "type": "object",
        "properties": {
          "tag_keys": {
            "type": "array",
            "items": {"type": "string"},
            "example": ["tag1", "tag2"]
          }
        }
      },
      "EnabledTagPostResponse": {
        "type": "object",
        "properties": {
          "tag_keys": {
            "type": "array",
            "items": {"type": "string"},
            "example": ["tag1", "tag2"]
          }
        }
      },
      "EnabledTagPostData": {
        "type": "object",
        "properties": {
          "tag_keys": {
            "type": "array",
            "items": {"type": "string"},
            "example": ["tag1", "tag2"]
          },
          "schema": {
            "type": "string",
            "example": "acct12345"
          },
          "action": {
            "type": "string",
            "enum": ["create", "delete"]
          }
        }
      },
      "dbPerformanceExplainQueryPost":{
        "type": "object",
        "properties": {
          "sql_statement": {
            "type": "string",
            "example": "select col from table where filter = 'value';"
          }
        }
      },
      "dbPerformanceExplainQueryPostResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "query_plan": {
              "type": "string"
            }
          }
        }
      },
      "TrinoQueryPost":{
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "example": "SELECT * FROM aws_openshift_daily"
          },
          "schema": {
            "type": "string",
            "example": "org1234567"
          }
        }
      },
      "TrinoQueryPostResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "column_name": {
              "type": "string"
            }
          }
        }
      },
      "TrinoUiGetResponse":{
        "type": "object",
        "properties":{
          "api_service_name":{
            "type": "string"
          },
          "trino_response":{
            "type": "object"
          }
        }
      },
      "TrinoUiGetErrorResponse":{
        "type":"object",
        "properties":{
          "Error":{
            "type":"string",
            "example":"query"
          }
        }
      },
      "CrawlAccountHierarchyPost":{
        "type": "object",
        "properties": {
          "schema": {
            "type": "string",
            "example": "acct12345"
          },
          "start_date": {
            "type": "string",
            "example": "2020-09-01"
          },
          "account_structure": {
            "type": "object",
            "properties": {
              "days": {
                "type": "array",
                "items": {"type": "object"},
                "example": [
                  {"day":{
                    "date": "-90",
                    "nodes": [
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "ROOT_O1",
                        "org_unit_name": "Root",
                        "accounts": [{"account_alias_id": "90", "account_alias_name": "ROOT TEST"}]
                      },
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "OU_01",
                        "org_unit_name": "Dept OU_01",
                        "parent_path": "ROOT_O1",
                        "accounts": [
                            {"account_alias_id": "91", "account_alias_name": "acct 01"},
                            {"account_alias_id": "92", "account_alias_name": "acct 02"}
                        ]
                      },
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "OU_02",
                        "org_unit_name": "Dept OU_02",
                        "parent_path": "ROOT_O1"
                      }
                    ]
                  }
                }
              ]
              }
            }
          }
        }
      },
      "CrawlAccountHierarchyPostResponse":{
        "type": "object",
        "properties": {
          "account_structure": {
            "type": "object",
            "properties": {
              "days": {
                "type": "array",
                "items": {"type": "object"},
                "example": [
                  {"day":{
                    "date": "-90",
                    "nodes": [
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "ROOT_O1",
                        "org_unit_name": "Root",
                        "accounts": [{"account_alias_id": "90", "account_alias_name": "ROOT TEST"}]
                      },
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "OU_01",
                        "org_unit_name": "Dept OU_01",
                        "parent_path": "ROOT_O1",
                        "accounts": [
                            {"account_alias_id": "91", "account_alias_name": "acct 01"},
                            {"account_alias_id": "92", "account_alias_name": "acct 02"}
                        ]
                      },
                      {
                        "organizational_unit": "None",
                        "org_unit_id": "OU_02",
                        "org_unit_name": "Dept OU_02",
                        "parent_path": "ROOT_O1"
                      }
                    ]
                  }
                }
              ]
              }
            }
          }
        }
      },
      "runningCeleryTasks": {
        "type": "object",
        "properties": {
          "active_tasks": {
            "type": "string",
            "format": "list",
            "example": ["a8d39868-dbd3-47ac-9220-82370e35b59c"]
          }
        }
      },
      "celeryQueueLength": {
        "type": "object",
        "properties": {
          "download": {
            "type": "integer",
            "example": 14
          },
          "summary": {
            "type": "integer",
            "example": 5
          },
          "priority": {
            "type": "integer",
            "example": 0
          },
          "refresh": {
            "type": "integer",
            "example": 0
          },
          "cost_model": {
            "type": "integer",
            "example": 4
          },
          "celery": {
            "type": "integer",
            "example": 2
          },
          "ocp": {
            "type": "integer",
            "example": 3
          },
          "hcs": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "clearCeleryQueues": {
        "type": "object",
        "properties": {
          "purged_tasks": {
            "type": "integer",
            "example": 8
          }
        }
      },
      "gcpInvoiceMonthlyCost": {
        "type": "object",
        "properties": {
          "monthly_invoice_cost_mapping": {
            "type": "object",
            "properties": {
              "previous": {
                "type": "number",
                "example": 204.51
              },
              "current": {
                "type": "number",
                "example": 204.51
              }
            }
          }
        }
      },
      "purgeTrinoFiles": {
        "type": "object",
        "properties": {
          "monthly_invoice_cost_mapping": {
            "type": "object",
            "properties": {
              "1234-3234-2342-2343": {
                "type": "string",
                "example": "/path/in/s3"
              }
            }
          }
        }
      },
      "NotificationGetResponse": {
        "type": "object",
        "properties": {
          "monthly_invoice_cost_mapping": {
            "type": "object",
            "properties": {
              "1234-3234-2342-2343": {
                "type": "string",
                "example": "/path/in/s3"
              }
            }
          }
        }
      },
      "UpdateExchangeRates": {
        "type": "object",
        "properties": {
          "updated_exchange_rates": {
            "type": "object",
              "example": {
                "USD": 1.23
            }
          }
        }
      },
      "Error": {
        "required": [
            "errors"
        ],
        "properties": {
            "errors": {
                "type": "array",
                "items": {
                    "type": "object",
                    "example": {
                        "detail": "Not Found.",
                        "status": 404
                    }
                }
            }
          }
      },
      "ExpiredDataDeleteResponse": {
        "type": "object",
        "properties": {
          "Download Request Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "ExpiredDataGetResponse": {
        "type": "object",
        "properties": {
          "Async jobs for expired data removal (simulated)": {
            "type": "string",
            "format": "list",
            "example": []
          }
        }
      },
      "Manifest": {
        "required": [
          "id",
          "assembly_id",
          "manifest_creation_datetime",
          "manifest_updated_datetime",
          "manifest_completed_datetime",
          "manifest_modified_datetime",
          "billing_period_start_datetime",
          "provider_id",
          "s3_csv_cleared",
          "s3_parquet_cleared",
          "export_time"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "assembly_id": {
            "type": "string"
          },
          "manifest_creation_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "manifest_updated_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "manifest_completed_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "manifest_modified_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "billing_period_start_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "provider_id": {
            "type": "string"
          },
          "s3_csv_cleared": {
            "type": "boolean"
          },
          "s3_parquet_cleared": {
            "type": "boolean"
          },
          "operator_version": {
            "type": "string"
          },
          "export_time": {
            "enum": [
              "year-month-day:time"
            ]
          }
        }
      },
      "Manifests": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPagination"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          }
        ]
      },
      "ReportStatus": {
        "required": [
          "id",
          "report_name",
          "last_completed_datetime",
          "last_started_datetime"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "report_name": {
            "type": "string"
          },
          "assembly_id": {
            "type": "string"
          },
          "last_completed_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "last_started_datetime": {
            "enum": [
              "year-month-day:time"
            ]
          },
          "etag": {
            "type": "string"
          },
          "manifest": {
            "type": "number"
          }
        }
      },
      "PaginationMeta": {
        "properties": {
            "count": {
                "type": "integer",
                "format": "int64",
                "example": 30
            }
        }
      },
      "PaginationLinks": {
          "properties": {
              "first": {
                  "type": "string",
                  "format": "uri",
                  "example": "/cost-management/v1/(resources)/?offset=0"
              },
              "previous": {
                  "type": "string",
                  "format": "uri",
                  "example": "/cost-management/v1/(resources)/?offset=20"
              },
              "next": {
                  "type": "string",
                  "format": "uri",
                  "example": "/cost-management/v1/(resources)/?offset=40"
              },
              "last": {
                  "type": "string",
                  "format": "uri",
                  "example": "/cost-management/v1/(resources)/?offset=100"
              }
          }
      },
      "ListPagination": {
          "properties": {
              "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
              },
              "links": {
                  "$ref": "#/components/schemas/PaginationLinks"
              }
          }
      },
      "SourcePagination": {
        "allOf": [{
            "$ref": "#/components/schemas/ListPagination"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SourceResponse"
                }
              }
            }
          }
        ]
      },
      "ReportStatuses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPagination"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReportStatus"
                }
              }
            }
          }
        ]
      },
      "ReportDataGetResponse": {
        "type": "object",
        "properties": {
          "Report Data Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "HCSDataGetResponse": {
        "type": "object",
        "properties": {
          "Report Data Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "HCSFinalizationDataGetResponse": {
        "type": "object",
        "properties": {
          "Report Data Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "UpdateCostModelCostGetResponse": {
        "type": "object",
        "properties": {
          "Update Cost Model Cost Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "UploadNormalizedDataPostResponse": {
        "type": "object",
        "properties": {
          "AsyncResult ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "integer",
            "example": "1"
          },
          "schema_name": {
            "type": "string",
            "example": "org1234567"
          }
        }
      },
      "Infrastructure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": "1"
          },
          "infrastructure_type": {
            "type": "string",
            "example": "AWS"
          },
          "infrastructure_provider_id": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      },
      "Provider": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          },
          "setup_complete": {
            "type": "boolean",
            "example": true
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T01:01:01Z"
          },
          "data_updated_timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T01:01:01Z"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "paused": {
            "type": "boolean",
            "example": true
          },
          "customer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "infrastructure": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infrastructure"
            }
          }
        }
      },
      "SourceResponse": {
        "type": "object",
        "properties": {
          "source_id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "source_uuid": {
            "type": "string",
            "format": "uuid",
            "example": "57e60f90-8c0c-4bd1-87a0-2143759aae1d"
          },
          "name": {
            "type": "string",
            "example": "My Source"
          },
          "auth_header": {
            "type": "string",
            "example": "adfjkzx=="
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "account_id": {
            "type": "string",
            "example": "10001"
          },
          "source_type": {
            "type": "string",
            "example": "AWS"
          },
          "authentication": {
            "type": "object",
            "description": "Dictionary containing resource name.",
            "example": {
              "role_arn": "arn"
            }
          },
          "billing_source": {
            "type": "object",
            "description": "Dictionary containing billing source.",
            "example": {
              "bucket": "test-bucket"
            }
          },
          "koku_uuid": {
            "type": "string",
            "format": "uuid",
            "example": "57e60f90-8c0c-4bd1-87a0-2143759aae1d"
          },
          "pending_delete": {
            "type": "boolean",
            "example": true
          },
          "pending_update": {
            "type": "boolean",
            "example": true
          },
          "out_of_order_delete": {
            "type": "boolean",
            "example": true
          },
          "status": {
            "type": "object",
            "example": {
              "status": "Everything is gravy."
            }
          },
          "paused": {
            "type": "boolean",
            "example": true
          },
          "provider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Provider"
            }
          },
          "additional_context": {
            "type": "object",
            "description": "Dictionary containing context information.",
            "example": {
              "crawl_hierarchy": "False"
            }
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "api_version": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "celery_status": {
            "type": "object",
            "example": {
              "Error": "Unable to establish connection with broker."
            }
          },
          "commit": {
            "type": "string",
            "example": "178d2ea"
          },
          "current_datetime": {
            "type": "string",
            "format": "date",
            "example": "2019-08-14T20:18:20.822184Z"
          },
          "database_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatabaseConnection"
            },
            "example": [
              {
                "database": "postgres",
                "database_connections": 0
              },
              {
                "database": "koku",
                "database_connections": 11
              },
              {
                "database": "template1",
                "database_connections": 0
              },
              {
                "database": "template0",
                "database_connections": 0
              }
            ]
          },
          "debug": {
            "type": "boolean",
            "example": true
          },
          "platform_info": {
            "type": "object",
            "example": {
              "system": "Darwin",
              "node": "node-1.example.com",
              "release": "17.5.0",
              "version": "Darwin Kernel Version 17.5.0",
              "machine": "x86_64",
              "processor": "i386"
            }
          },
          "python_version": {
            "type": "string",
            "example": "3.6.1"
          },
          "modules": {
            "type": "object",
            "example": {
              "coverage": "4.5.1",
              "coverage.version": "4.5.1",
              "coverage.xmlreport": "4.5.1",
              "cryptography": "2.0.3",
              "ctypes": "1.1.0",
              "ctypes.macholib": "1.0",
              "decimal": "1.70",
              "django": "1.11.5",
              "django.utils.six": "1.10.0",
              "django_filters": "1.0.4",
              "http.server": "0.6"
            }
          }
        }
      },
      "DatabaseConnection": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string"
          },
          "database_connections": {
            "type": "string"
          }
        }
      },
      "CrawlAccountHierarchy": {
        "type": "object",
        "properties": {
          "Crawl Account Hierarchy Task ID": {
            "type": "string",
            "format": "uuid",
            "example": "83ee048e-3c1d-43ef-b945-108225ae52f4"
          }
        }
      }
    }
  }
}
