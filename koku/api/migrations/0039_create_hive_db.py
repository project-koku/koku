# Generated by Django 3.1.7 on 2021-03-03 19:26
import logging
import os

from django.conf import settings
from django.db import migrations
from django.db.utils import ProgrammingError


LOG = logging.getLogger(__name__)


def create_hive_db(apps, schema_editor):
    rolname = settings.HIVE_DATABASE_USER
    datname = settings.HIVE_DATABASE_NAME
    kokudb = settings.DATABASES.get("default").get("NAME")
    kokudbuser = settings.DATABASES.get("default").get("USER")
    db_password = settings.DATABASES.get("default").get("PASSWORD")
    hive_db_password = settings.HIVE_DATABASE_PASSWORD

    role_create_sql = f"""
        create role "{rolname}" with login encrypted password '{{hivepw}}';
    """

    role_public_revoke_sql = """
        revoke connect on database "{}" from "public";
    """

    role_revoke_sql = f"""
        revoke connect on database "{kokudb}" from "{rolname}";
    """

    role_grant_sql = f"""
        grant connect on database "{datname}" to "{kokudbuser}";
    """

    db_create_sql = f"""
        create database "{datname}" owner "{rolname}";
    """

    db_access_check_sql = """
        select has_database_privilege(%s, %s, 'connect');
    """

    with schema_editor.connection.connection.__class__(
        "postgresql://{user}:{password}@{host}:{port}/{dbname}".format(
            password=db_password, **schema_editor.connection.connection.get_dsn_parameters()
        )
    ) as conn:
        conn.autocommit = True
        with conn.cursor() as cur:
            LOG.info(f"Creating role {rolname}.")
            try:
                cur.execute(role_create_sql.format(hivepw=hive_db_password))
            except ProgrammingError as e:
                LOG.info(e)
                LOG.info(f"Role {rolname} exists.")

            LOG.info(f"""Granting role "{rolname}" membership to "{kokudbuser}".""")
            cur.execute(f"""grant "{rolname}" to "{kokudbuser}"; """)

            try:
                LOG.info(f"Creating database {rolname}.")
                cur.execute(db_create_sql)
            except ProgrammingError as e:
                LOG.info(e)
                LOG.info(f"Database {rolname} exists.")

            # Revoke access to koku db from public
            cur.execute(db_access_check_sql, ("public", kokudb))
            if cur.fetchone()[0]:
                LOG.info(f"Revoking public access to {kokudb}.")
                cur.execute(role_public_revoke_sql.format(kokudb))

            # Revoke access to hive db from public
            cur.execute(db_access_check_sql, ("public", datname))
            if cur.fetchone()[0]:
                LOG.info(f"Revoking public access to {datname}.")
                cur.execute(role_public_revoke_sql.format(datname))

            # Revoke access to koku db from hive user
            cur.execute(db_access_check_sql, (rolname, kokudb))
            if cur.fetchone()[0]:
                LOG.info(f"Revoking {rolname} access to {kokudb}.")
                cur.execute(role_revoke_sql)

            # Grant access to hive db from koku user
            cur.execute(db_access_check_sql, (kokudbuser, datname))
            if not cur.fetchone()[0]:
                LOG.info(f"Granting {kokudbuser} access to {datname}.")
                cur.execute(role_grant_sql)

            LOG.info(f"""Revoking role "{rolname}" membership from "{kokudbuser}".""")
            cur.execute(f"""revoke "{rolname}" from "{kokudbuser}"; """)


class Migration(migrations.Migration):

    dependencies = [("api", "0038_drop_app_needs_migrations_func")]

    operations = [migrations.RunPython(create_hive_db)]
