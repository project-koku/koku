[project]
name = "koku"
version = "0.0.0"
description = "An open source solution for cost management of cloud and hybrid cloud environments."
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11.0,<3.12"
dependencies = [
    "adal",
    "app-common-python",
    "azure-identity",
    "azure-mgmt-costmanagement",
    "azure-mgmt-compute",
    "azure-mgmt-resource",
    "azure-mgmt-storage",
    "azure-storage-blob",
    "boto3",
    "bs4",
    "cachetools",
    "celery",
    "ciso8601",
    "confluent-kafka",
    "croniter",
    "Django~=4.2.0",
    "django-cors-headers",
    "django-environ",
    "django-extensions",
    "django-filter",
    "django-prometheus",
    "django-redis",
    "django-tenants",
    "djangorestframework",
    "djangorestframework-csv",
    "google-api-python-client",
    "google-auth",
    "google-cloud-bigquery",
    "google-cloud-storage",
    "gunicorn",
    "ibm-cloud-sdk-core",
    "ibm-platform-services",
    "jinjasql2",
    "kafka-python",
    "kombu<5.3",
    "msrestazure",
    "numpy",
    "oci",
    "pandas<2.3",
    "prometheus-client",
    "psutil",
    "psycopg2",
    "pyarrow",
    "python-dateutil",
    "querystring-parser",
    "redis",
    "requests",
    "sentry-sdk",
    "statsmodels",
    "trino",
    "unleashclient<5",
    "watchtower==1.0.6",
    "whitenoise",
    "pydantic",
    "sqlparse",
    "polars",
]

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.python.org/simple"

[dependency-groups]
dev = [
    "argh",
    "astroid",
    "flower",
    "coverage",
    "crc-bonfire",
    "debugpy",
    "django-cprofile-middleware",
    "faker",
    "flake8",
    "koku-nise",
    "matplotlib",
    "model-bakery",
    "pre-commit",
    "pydocstyle",
    "PyYaml",
    "requests-mock",
    "responses",
    "snakeviz",
    "tblib",
    "tox",
    "watchdog",
]

[tool.ruff]

line-length = 119
target-version = "py311"

extend-exclude=["**/migrations/*.py"]

[tool.ruff.lint]
# F https://docs.astral.sh/ruff/rules/#pyflakes-f
# E, W https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
# C90 https://docs.astral.sh/ruff/rules/#mccabe-c90
# UP https://docs.astral.sh/ruff/rules/#pyupgrade-up
select = ["F", "E", "W", "C90", "UP"]
# extend-select = ["UP"]

[tool.ruff.lint.per-file-ignores]
# Ignore `F401` (unused import) in all `__init__.py`, `models.py`, and `views.py` files.
"**/__init__.py" = ["F401"]
"**/models.py" = ["F401"]
"**/views.py" = ["F401"]

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["koku", "api", "common", "cost_models", "forecast", "hcs", "kafka_utils", "key_metrics", "masu", "providers", "reporting", "reporting_common", "sources", "subs"]
order-by-type = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
